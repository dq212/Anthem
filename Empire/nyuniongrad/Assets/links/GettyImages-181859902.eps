%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Desktop) ()
%%Title: (approved.eps)
%%CreationDate: 9/22/2013 5:01 PM
%%BoundingBox: 46 46 354 354
%%HiResBoundingBox: 46.7988 46.8008 353.2012 353.1992
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 0.129412 1 1 0.031373 (R=206 G=23 B=23)
%%+ 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 200.5 199.5 200.5 199.5
%AI3_TileBox: -106 -196 506 596
%AI3_DocumentPreview: Header
%AI5_ArtSize: 400 400
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1
%AI5_TargetResolution: 800
%AI5_NumLayers: 3
%AI8_OpenToView: -355 675 1 991 909 18 0 0 67 75 0 0
%AI5_OpenViewLayers: 777
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.32549 0.32549 0.32549 0.662745 0.662745 0.662745
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 21754 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD35FFCACAA1A19A9A6F936893689368936893939A9AC3A1CACAFD
%64FFA8C39A93688C68686893689368936F936F9A6F936893FD0568936F9A
%A1CACAFD5CFFA19A6F93688C689393A1A1CAA8FD0BFFA8CAA1C39A9A6F93
%688C68939ACACAFD56FFA19A686868936F9AA1CAFD18FFA8A19A93686868
%936FA1A8FD50FFCAA16F8C68939ACACAFD21FFA19A6F8C68939ACAFD4CFF
%A16F8C686F6FCACAFD09FFA8CAA1A19A9A93936F936F936FFD049AC3A1CA
%CAFD09FFA19A6868689AA1FD48FFA19368686FC3CAFD07FFCACA9A9A6F93
%6893688C68936893689368936893688C68936F9393A1A1FD09FFA1936868
%6FC3FD44FFC36F68689AA1FD07FFA1A16F93FD07688C68686893686F6893
%68936F9368686893FD0568939ACACAFD05FFA8CA6F686893A1FD40FFA89A
%688C93CAFD06FFA8A19393689368936893939A9AC3A8CA93936F9368936F
%C3CAFFCACA9A93689368936893689368939ACAFD06FFA19A688C93CAFD3D
%FF9A686893A1FD05FFA8A16F6868936868688C68686FFFFFFF6FA1FFFF9A
%93686868FFFFA16893A1FFA1936893A1C36F9368936868689AA1FD06FFCA
%6F68689ACAFD39FFCA6F8C6FA1FD06FF9A936893688C689AA1C39A93688C
%9AFFCA9368C3FFFF689368CAFFC368936893CAFF9A9368A1FFFFCA9A6893
%688C68936FA1A8FD05FFA1936893A1FD36FFA89A68686FFD05FFA89A6868
%686F689AA1CA9AC3FFFFA193689AFFFF68689AFFA868689AFFFF6F8C686F
%689AFFFF68686FFFFF9A6F689AC393936868686F76CAFD04FFA89A68689A
%FD34FFA8936893A1FD05FF9A9368936893689ACAFFFF9368A1FFFF93936F
%FFFF9368CAFF9A6893A1FFCA936893689393FFFF9A689AFFFF93936893FF
%FFA19A939368936FA1FD05FFCA6F8C6FCAFD31FFA168689ACAFD04FFA168
%8C6868689368686893CAFF9A686FFFFF9A6893A8FFA1CAFF9A689368A1FF
%CA689368936893FFFF6F686FFFFF9368689AFF6F686FCA9A9368936893A1
%FD05FF936868A1FD2FFF9A8C68A1FD04FFA89A689368939ACACACA939368
%C3FFCA6893FFFF6F9368CAFFC3A1FFCA93688C9AFFCA936893689393FFFF
%936893FFFF6F8C9AFF6F93688CA8FFCAA16893688C93FD05FFA193689AFD
%2DFF6F6868CAFD04FFA16F6893689AA1A19AFFFFFF6F686FFFFF9AA1FF6F
%686893A1FF9A68A8FFA8936893FFFF6F68689368A1FFCA686868FFFF9368
%FF9A6868686FFFFFA19ACA6F93686868A1FD04FFA16F689ACAFD2AFF938C
%6FFD05FF9A93689393CAFFFF936893FFFFA16893CAFFCAA16F93689368C3
%FFC36893CAFFCA9A68C3FFFF6893689AFFFF93936893CAFF93FFA18C6893
%68CAFFFF688C9AFFA1936893689ACAFFFFFFCA9A6893CAFD27FFCA68686F
%FD04FFCA688C6893689A9AFFFFCA6868A1FF9A6868C3FFCA68936893688C
%A1FFCA9A689ACAFFA89A68A1FFCA9AC3FFFF6F8C686F68CAFFCAA18C6893
%689AFFFF6F686868A8CA689368936893A1FFFFFFCA9A6893A8FD25FFCA6F
%689AFD04FFC3689368936893688C9AFFFF9A68CACA93689393FFFF936893
%689393CAA8CA9A9368936F936F9368939AA19A9A6F9368936893A8FFA193
%68936893A8FFFF9A93CA68A19A936FCA93936893A1FD04FF9A6893A8FD23
%FFCA68689AFD04FF9A689368686893686F6893A8FFA1A1A1936893686FA8
%FFA19A6893689368936868688CFD0B6893686F689368CAA893686F68689A
%FFFF9AA1FFA168686F6868A1FF6F6868689AFD04FF9A686FA8FD22FF6F8C
%9AFD04FF9A689368C39A9368936893689AFFFFA18C68936F936FFFFFCA9A
%936893689368936FFD049AC3A1C39AA19A9A6F9368936893689393936893
%68936FFFFFCA6893CA93689368939AFFFFFFA19368939AFD04FF9A6893CA
%FD20FF6F6876FD04FF9A6893689AFFFFA193686F689368CAFFCA68686893
%689A9A936868688C689A9AC3A8FD0DFFA8CAA1A16F936868689368689AFF
%FFFF6F8C689A689368686FFFFFCA68C3A168688C6FFD04FF9A6893CAFD1E
%FF6F8C93FD04FF9A6893689393FD04FFA16893689393FFFFC36893689368
%8C68936F9AA1FD17FFCACA9A93689368939AFFFF936893689368936FFFFF
%FF6F8C68FFA18C689393FD04FF9A689AFD1DFF9A686FFD04FF9A686F6893
%6868A19AA1FFFFCA6F686868A1FFFFCA6FFD04689AA1FD1DFFA8A16F9368
%68689AA1A16F9AA19368CAFFFF6F6868689AFF6F6868686FFFFFFFCA9368
%9AFD1BFFA18C68FD04FF9A689368936F9368C3A18C9AFFFFFFA19368C3FF
%C3939368939ACAFD10FFCAFFCAFD0FFFCA9A68936893A1FFFFC368CAFFFF
%9A936F9368C3FFC368936F8C9AFFFFFFCA9368C3FD19FFA18C68CAFFFFFF
%9A689368936893686F6FCA6FA1A1CAFFFFA8CAA193688C689AA8FD0AFFCA
%A19A6F936893686F689368936F9A9AA1A8FD0AFFCA769368686F9AA1CAFF
%FFA16868936868A1FFA168689368689AFFFFFFA18C68CAFD18FF9368C3FF
%FFFFC368936893689368936893A1FF9A8C68C3FFFF9A93688C6FCAFD08FF
%CAC3939368936F9AA1C3A1CAA8CAA1CAA1A19A9A6F93689AA1FD09FFA89A
%6893689AFFFFA1936893689393FFFFC368936893688CA1FFFFFFA18C6FFD
%17FF9A689AFFFFFFCA6893686F6893686F6893689AA16868686FCA6F6868
%93A1FD08FFA16F93689AA1CACAFD0FFFA8A16F936893A1FD08FFA1686868
%93A8CAFD04686FFFFFFF6F93686F68936868A1FFFFFF6F689AFD15FFCA68
%93CAFFFFFF6F936F9368936F9368936F936FFF6F8C68936F93689ACAFD07
%FFA193689AA1FD18FFCA93936FC3CAFD07FF93936893A1CA9A9AA1FFFFFF
%9A936F9368936F936893FD04FF6F8CA1FD14FF6868A1FFFFFF9368689368
%936893689368936868A1CA9A936893689AFD07FFA168939ACAFD0DFFA19A
%FD0DFFA8A168689AFD07FF9A8C68689AFD05FF9A68689368936893689368
%9AFFFFFFCA6893A8FD12FF9A689AFFFFFFA1936893689368936893689368
%9368C3FFC3689368CAFD06FFA19368A1CAFD0FFF6893FD10FFA19368CAFD
%06FFA193688C6FA19A9A6F936893689368936893689368C3FFFFFF9A689A
%FD11FFA16868FFFFFFA86F6893686F6893686F6893686F6893A89A686868
%CAFD06FF6F686FFD11FF9A6868A1FD10FFA89A689ACAFD05FFA193686FFD
%056893686F6893686F6893686868CAFFFFA89368CAFD10FF9A68C3FFFFFF
%9A68936F9368936F9368936F9368936F9368936FFD06FFCA6893A8FD12FF
%9368936FFD12FFCA6F93A1FD05FFCA9368936F9368936F9368936F936893
%6F9368939AFFFFFFA18C93FD0FFFA16893FFFFFFC3689368936893689368
%93689368936893686868FD06FFA1689AFD12FFA8A16893688C9ACACAFD11
%FF9A689AFD05FFA89368936893689368936893689368936893688CA1FFFF
%FF6F68A1FD0EFF938CA1FFFFFF6F93689368936893689368936893689368
%936FFD06FF9A68C3FD0FFFA1939A6F9368936893689368936F9A9AFD0FFF
%A1689AFD05FFCA93689368936893689368936893689368936893FFFFFFCA
%6893FD0DFFA1686FFFFFFF9A686893686F6893686F6893686F6893686868
%CAFD05FF9368CAFD10FFA1686893686F6893686F6893686868A1FD10FFA1
%686FFD05FFA1686893686F6893686F6893686F6893686F68A1FFFFFF9A68
%A1FD0CFF9A68CAFFFFCA9368936F9368936F9368936F9368936F9368CAFD
%05FF9A68FD13FFA193689368936F9368936F9368CAFD12FFCA9393FD05FF
%A193689368936F9368936F9368936F9368936FFFFFFFA88C6FFD0BFFA168
%9AFFFFFF9A68936893689368936893689368936893689AFD05FF9A68CAFD
%08FFCAC3FD0AFFA193689368936893689368CAFD0AFFA1FD09FFA8936FFD
%05FF9A8C6893689368936893689368936893688C9AFFFFFF6F68A1FD0AFF
%9368A1FFFFFF68936893689368936893689368936893689AFD05FF9A68FD
%0AFFCA68CAFD0AFFA19368936893689368CAFD0AFFA88CA1FD09FFA8939A
%FD05FF6F936F936893689368936893689368936893CAFFFFCA689AFD09FF
%A1686FFFFFFF9A686893686F6893686F6893686F6893686FA8FD04FFA168
%CAFD08FFA1A16F686FA1A1FD08FFCA6893686F68936868A1FD07FFA8C3A1
%936893A1A1A8FD07FFA1689AFD04FFCA6893686F6893686F6893686F6893
%686F68A1FFFFA89368CAFD08FFA168C3FFFFFF9368936F9368936F936893
%6F9368936F93A1FD04FFCA68C3FD09FF9A6893689368A1FD08FFA1936F93
%68936F9368C3FD08FF9A8C6893688C9AFD09FFA18CA1FD04FFC368936893
%6F9368936F9368936F9368936FFFFFFFA18C9AFD08FF6893A8FFFFA16893
%68936893689368936893689368936FFD05FF689AFD0BFF9A686F68A1FD09
%FF9A689368936F8C68689AFD09FF9A68688C9AFD0BFF9A6FA8FD04FF9A68
%93689368936893689368936893688CA1FFFFFF6893A8FD06FFA1689AFFFF
%FF6F93689368936893689368936893689368CAFD04FF9A93FD0CFF9A8C68
%68A1FD09FF93686FC3FFFFA193689AFD09FFC3689368A1FD0CFF6F9AFD04
%FFA8936893689368936893689368936893689AFFFFFF9A68C3FD06FF9A68
%A1FFFFA1686893686F6893686F6893686F6893689AFD04FFA168A1FD0CFF
%9A9ACA9A9AFD08FFA8939AFD05FFA8A16FFD09FF769AA89A6FFD0CFFCA68
%A8FD04FF6F68686F6893686F6893686F6893686F68CAFFFFA1686FFD06FF
%6F93CAFFFF9A68936893689368936893689368936893A8FD04FF939AFD0D
%FFCAFFFFFFCAFD2EFF9A68FD05FF688C689368936893689368936893688C
%9AFFFFFF6F93CAFD04FFA1689AFFFFFF9A9A9AA19A9A9AA19A9A9AA1FD04
%9AA1FD04FFCA76FD41FFCA9AA8FD04FFA19A9A9AA19A9A9AA19A9A9AA19A
%9A9AA1FFFFFF9A68A1FD04FF9A68CAFD76FFA18C9AFD04FF6F68A8FD76FF
%CA6893FFFFFFCA936FFFFFFFA1FD719ACAFFFF9A68CAFFFFC3689AFFFFFF
%CAA1CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8FFFFFF9A68A1
%FFFF9A8CA1FD78FFCA689AFFFF9368CAFD78FFA8686FFFFF6893FD7AFF6F
%93FFA8686FFD7AFF9A68CACA68A1FD7AFF9A68A19A68A1FD49FFCAFD30FF
%A168A1A168CAFD0CFFA19AFD06FFA1CAA1CAA1C3A1CACAFFFFFFA8C3A1CA
%A1C3A1C3A8FD04FFCAA1CAA1CAA1C3A1CAFD0AFFA8C39A9A9AC3CAFFFFFF
%CAC3A1CAA1CAA1CAFFFFCAC3A1CAA1C3A1CAA1CAA1C3A1CAA1C3CAFFA1C3
%A1CAA1C3A1C3A1CAFD0AFFA18C9A6F93A8FD0BFF6F6868CAFD04FFCA9A68
%8C68939A9A68686FCAFFA16F9368686FA16F6868A1FFFFA1936868689A9A
%936893A1FD06FFCA6F6868A19A9368939AFFFFCA68686893689AA1FFFFCA
%6F9368936F93686868A19A9A6F68689AA89A6F68688C6FA16F9368939AFD
%08FFCA689A9368FD0BFFA893688C9AFD06FFCA689393FFFFCA688C68CAFF
%FF6F9368CAFFFF9A8C689AFFFFA8936893FFFFFF9A688C9AFD04FFCA688C
%9AFD04FFA1688C6FFFFFFF9393689AFD06FF6F93CAFFA18C689AFD04FF9A
%8C93FFFFCA68936FFFFFFFCAC3688C68CAFD06FFA893936893A8FD0AFFA1
%6F936893A8FD05FFA1686893FFFFFFA168686FFFFF936868A1FFFFFF6868
%68CAFFCA68936FFFFFFFA8686893A8FFFFCA68686FFD06FF9A68686FFFFF
%A168686FFD05FFA8689AFFFFA1688C6FFD05FF9A68A1FFA1686893FD05FF
%A1686868CAFD06FF6893936FFD0BFF6FFF9A9368CAFD05FFCA689393FFFF
%FFA1936893FFFF939368CAFFFFFF9A68939AFFA893689AFD04FF6F9368CA
%FFFF9A9368CAFD07FF93688CA1FFCA936893CAFD04FFC368FFFFFFA19368
%9AFD06FFA1CAFFCA689393FD06FF9A68936FFD06FF93686893CAFD09FFA1
%93FFA168689AFD05FFA168689AFFFFFFCA686F68FFFF9A6893A1FFFFFF93
%6868A1FFCA68936FFFFFFFA8936893A8FFA8936893A8FD07FF9A8C6893FF
%FF6F6868A1FD04FF6F9AFFFFFFA168936FFFFFFF9ACAFD04FFA1936893FD
%06FFA868688CA1FD05FF6F939393FD0AFF9AA1FFA8936893FD05FFCA6893
%6FFFFFFF9A93689AFFFF9A9368CAFFFFCA93688CA1FFA893689AFFFFFFC3
%688C93FFFFA1689393FD08FFCA689368CAFFC368936FFFFFFFA893A8FFFF
%FFA193689AFFFFA893A8FD04FFCA689393FD07FF939368A1FD05FF9A6868
%93FD0AFF6FFFFFFF6F9368CAFD04FFA1686893FFFFA16F688CA1FFFF9A68
%68A1FFFF9A68686FFFFFCA68686FFFFFA168936FFFFFFF9A68689AFD08FF
%A8936868A1FFA8936868A1FFFF9A6FFD04FFC368686FA19A6F68CAFD04FF
%A1686893FD07FF9A68686FFD05FF6F689393FD09FFA19ACACACA9A68939A
%FD04FFCA68936FA19A93689ACAFFFFFF9A93689A9A9A68939AFFFFFFCA93
%68939A936893A1FD04FF9A68939AFD09FF6F9368CAFFFF9A9368C3FFFF68
%CAFD04FFA193689AA1C36F93CAFD04FFCA689393FD07FF9A93689AFD05FF
%9A68689AFD09FF9A689A6F936F936893CAFFFFFFA19368939AA1A1CAFD05
%FF9A686F9AC3A1CAA8FD04FFCA68686FCA9A68689AFD04FF9A686893FD08
%FFCA936893A1FFFFCA68686FFFA193CAFD04FFC368686FFFFFFF68CAFD04
%FFA168689AFD07FF9368689AFD05FF6F68936FFD08FFCA6FFD05FF689368
%CAFFFFFFCA689393FD09FF6F9368CAFD08FFA893689AFFFF939368C3FFFF
%FFC3689368FD08FFCA689368FD04FF9A6893A19A9AFD05FFA193689AFFFF
%FFCACAFD04FFCA68936FFD07FF689368C3FD05FF9A686893A8FD07FF6F9A
%FD05FF9A68689AFFFFFFA1686893FD09FF936868A1FD08FFCA68686FFFFF
%CA686868CAFFFFA8936868A1FD07FF9A68689AFD04FF9A68689368FD06FF
%A168936FFD07FFA8FFA1686893A8FD05FF9A686893CAFD05FF6893936FFD
%07FFCA93A1FD05FFA1936893FFFFFFCA689393FD09FF939368CAFD08FFA8
%93689AFFFFFF9A689393FFFFFF9A8C6893FD07FF936893CAFD05FF6F9368
%A1FD06FFA193689AFD06FFCA93CACA68936FFD05FFCA936893A1FD05FFCA
%936F6F6FA8FD06FFA168FD06FFCA689368A1FFFFA1686893FD09FF93688C
%A1FD08FFCA68936FFFFFFFA868688C9AFFFFFF6F68689AFD05FF9A6893A1
%FD06FF9A6868A8FD06FFCA68936FFD05FFA1936FFFA18C6893A8FFFFFFA8
%9368689AFD06FFCA68939A68CAFD04FFA1A1688C9ACAFD04FFA193688C6F
%A1A19A688C68A1A8FD05FFA8C3688C6893A1FD06FFCA9A8C68939ACAFFFF
%9A68688C93C3FFFF9A936893A1CAA19A6893A1FD07FFA18C93FD05FFCAC3
%9A8C68939ACAA1CA9A8C689AA1936893689AA1C39A8C6893A1FD07FFA893
%937668A1FD04FFA16FFD049AFFFFFFA1FD0B9A6FA1FD05FFCA6F9A9A9A76
%9AA8FD05FFFD069AA1FFFFFFFD059AFFFFFFA8A16F936F936FA1CAFD09FF
%6FCAFD05FFCA6FFD079A769A9AA1A1FD079A6F9A9ACAA8FD08FFCA689AC3
%68C3FD7AFFA168A1A1689AFD7AFFA168A1CA689AFD7AFF9393CAA86F68FD
%7AFF9368FFFF6F93CAFD79FF689AFFFF9A68CAFD78FFA1689AFFFFA1689A
%FFFFFFA1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1
%C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1
%C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1
%C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3CAFFFF
%A168C3FFFFCA6893FFFFFFA16F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A
%9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A
%6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A
%9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A6F9A9A9A
%6F9A9A9A6FCAFFFF6F68A8FFFFFF9368FD77FFCA9393FD04FF9A68A1FD76
%FFA1689AFD04FFCA689AFFFFFFA19AA19AA19AA19AA19AA19A9A9AA19AC3
%FD04FFA89ACAFFFFFF9A9A9AA19AA19AA19AA19AA19AA19AA19AA19AA19A
%A19AA19AA19AA19AA19AA19AA19AA19AA19AA19AA19AA19AA19AA19AA19A
%A19AA19AA19AA1CAFFFFFF9ACAFD04FFA19A9AA19AA19AA19AA19AA19AA1
%9AA1A1FFFFFF9A68A1FD04FFA89368FFFFFF9AFD0A689AFD0568CAFD04FF
%689AFFFFFF9AFD38689AFFFFFF9A68A8FFFFFFA8FD10689AFFFFA89368FD
%06FF9A8CA1FFFFCA68936F9368936F936893A1CA6F936F939AFD04FFCA68
%CAFFFFFF9A68936F9368936F936893689368936F9368936F9368936F9368
%936F936893689368936F9368936F936893689368936F9368936F93689393
%FFFFFFA88CA1FD04FF9A689368939ACAA1A1689368936F936893CAFFFFCA
%689AFD06FFC3689AFFFFFF936893686F689368686FCAFFFF6F936868A1FD
%04FF9A68FFFFFFCA9368936893689368936F936F9A689368936893689368
%93939368936868689A689368936893689368686F93689A68936893689368
%6868FFFFFFCA9393FD04FFCA68936893A8FD04FFCA6F68689368686FFFFF
%FF6F68A1FD06FFCA9368FFFFFFA18C68936893689AA1FFFFFFCA9A689368
%9AFD04FFCA939AFFFFFFA89368936893689368CACAFF9A8C689368936893
%689368CAFFA168939AFFA193689368936893689368A1FFFFCA9368936893
%689368CAFFFFFF9A68FD05FF93936893FFFFA1C3CAFFFFFF9393689368C3
%FFFFCA9368FD08FF9A689AFFFFFF68689AA16FA1FFFFFFCA6F68686F6893
%68A1FD04FFA168A1FFFFFFA1686893686F6893A8FFFFA1686F6893686F68
%9368689AFFFFCAA1FFFF9A6893686F6893686F68689AFFFFCA6868689368
%6868CAFFFFFFA168CAFD04FF9A686868A1A1686868939AFFFFC3686F6893
%A8FFFFA1689AFD08FFCA6893FFFFFFA16893CAFFFFFFA89A689368936893
%6F9368FD05FFA18CA8FFFFFFA19368936893A1FD04FF9A68936F9368936F
%93689AFD06FF93936F9368936F9368939AFD04FFC368936F9368CAFFFFFF
%CA68C3FD04FFCA9368939ACA68936893688C9AFFCA9368939AFFFFFF9393
%A8FD09FF9A68A1FFFFA86F689AFFCA6F8C686F68936F9A6F9368686FFD05
%FF9A68A8FFFFFFA193689368936FFFA1936F9368936893689368686FFD06
%FF936893689368936893689368A1A8936893689368CAFFFFFFCA689AFD05
%FF93689368CAA893686F68936868A1FF6F6868FFFFFFA1686FFD0AFFA18C
%93FFFFFF9A8C68CA938C6893689AA8FFFFFF9A93688C9AFD05FF9393A8FF
%FFFFA893689368939A93689368936893689368936FFD07FFCA9368936893
%689368936893939A6893688C6FCAFD04FF689AFD05FFA1689368C3FFFFFF
%C36F8C689368A1CA93689AFFFFFF9A68CAFD0BFF6F68A1FFFFCA68686F93
%686868CAFFFFA89A9ACA6F936868A1FD05FF6F68A8FFFFFFA89A686F6893
%686F6893686F689368686FFD09FFA8936893686F6893686F6893686F6868
%6FFD04FFCA6893FD05FFA16893686FA1A1A8FFFFFF9A686868A1A16893A8
%FFFFCA6893FD0CFFCA689AFFFFFFA16893689368CAFFFFA193689AFF9A68
%936893CAFD05FF9393A8FD04FFA16893689368936F9368936F9368C3CAFD
%09FFA193689368936F9368936F936893A1FD04FFCA689AFD05FFCA689368
%93A1936893A1FFFFFFA89A93CA6F8C9AFFFFFF938CA1FD0DFF9368A8FFFF
%CA93689368A1FFFF6F6868A1FFFF689368936893A8FD05FF6F68A1FD04FF
%CA6F8C6893689368936893689368936893A8FFFFCA6F9368936893689368
%9368936893689AA8FD04FFA1689AFD05FFCA68686893CAFFA89A68686FCA
%FD04FF9A6868FFFFFFA1686FFD0EFFA18C93FFFFFFA18C6893CAFF6F8C6F
%CAFFFF9A68689368936893CAFD05FF9A8C9AFD05FFA19A68936893689368
%9368936893689AFFFF9A8C68936893689368936893688C6FCAFD05FF9A68
%C3FD06FF6F936893A8CA9A9A6F936893689ACAFFA89368C3FFFFFF9368CA
%FD0FFF6F68A1FFFFFF6F6868CA936876FFFFFF9A686FA1A19A686F6893A8
%FD05FFA19368CAFD05FFC36F686893686F6893686F689368CAA88C686F68
%93686F68936868689AA1FD05FFA19368CAFD05FFCA6F68688CA19A68936F
%68689368686893CA9A689AFFFFFFA16893FD10FFCA6893CAFFFFFF68939A
%CACAFFFFCA6F93A8FFFFFFCA9A68936893A8FD06FF9A689ACAFD05FFA8A1
%93936893689368936F939A9A689368936893689368939ACAFD06FF9A8C9A
%FD06FFCA6F936893A1FF9A9368CAA19368FD0493C36893CAFFFFFF6F93A8
%FD11FF9A689AFFFFFFA168939ACAA19A6893A8FFFF9A68A1CA6F6893686F
%A1FD06FFCA68939AFD07FFA8A16F93686F688C6868688C686868936F9A9A
%CAFD06FFA8A16893A1FD06FFA1689368689AFFFFFF9A68A1FFA19368FF6F
%936868A1FFFFFF6F689AFD12FFCA9368CAFFFFFF9A6893688C6893CAFFCA
%9A6893FFFF688C689368939AFD07FFA19368A1CAFD09FFA8CAA1C3A1A1A1
%C3A1CACAFD09FF9A9368C3FD07FFA168936893A1CA6FCAFFFFA1C36F9A68
%93FFCA68939AFFFFFFA18C6FFD14FFA16868FFFFFFA893689368689AFFA8
%936893CAFF9A939A9A689368686FCAFD06FFA8A168686FCACAFD17FFA19A
%68939AFD07FFA89368936893A1FF6F6868CAFFFF9A6868686FFF9A6868FF
%FFFFA89368A1FD15FF9A8C9AFFFFFFA893689368CAFF9A689AFFFFA89ACA
%FFA8C3689368936FC3FD08FFA19A689393C3CAFD10FFCAA19A689393CAFD
%08FFA193689368936FA1CAC3689368CAFFFFA19368CA9A8C68CAFFFFFF9A
%689AFD17FF6F689AFFFFFFA18C686FA8A1689ACAFFA893A8FF93A1CA9368
%9368936893A1FD09FFA19A689368939AA1A1CAA1CAA1CAA1C39A9A6F9368
%6F6FC3CAFD08FFCA6F8C686868A19A6868A1A168689368A1FFFFA8CA9A8C
%68A1FFFFFFA16893CAFD17FFCA6893A1FFFFFF9A9368A1A1C3FFFFA8939A
%FF9A93FFCA68936893689368939ACAFD0AFFA8C39A9A6F936F9368936F93
%689393A1A1CAFD0AFFA89A689368936FCACA9368936FFF6F93689368A1FF
%FFA18C68A1FFFFFFCA6893A8FD19FFA1686FA8FFFFFF6F68689AA8CA9A68
%68A1CA93A8FF6F6868A19A6F68936868689AA8FD0DFFA8FFA8CAA8FFCAFF
%CAFD0CFFCA9A68689368686FFFFFFFA193686FA19A686F689368CAA16868
%9AFFFFFFCA6868A1FD1BFF9A689AFD04FF9A8C6893689368936FCACAFF9A
%93A1FFCA9A68936F936893689393CAFD1EFFA19A689368936893689A9ACA
%FFFFCA9A68C3A19368936893A193689AFD04FF6F8C9AFD1DFF9A689AFD04
%FF6F6868936893688C689A9ACAA8A16F8C6893689368936893686868939A
%A1A8FD16FFCAA19A686868936893A1CAA8C36F6868A1CAFFFFA19AC36893
%68936868689AFD04FF6F686FFD1FFF93689AFD04FF9A8C689368936FC3CA
%CA9AC3A8A168936893689368936893688C689368936FA1A1CACAFD0DFFCA
%C39A9A6F9368936893689ACAC3A1FFFFFFA1936893A1FFFFFFA893689368
%93689AFD04FF9A8C6FFD20FFA893689AFD04FF9A6868689AFFA19A68A1FF
%C3A8A16893686F6893686F689A9A936893FD0568936FFD049AA19AA19A9A
%6F93689368686893686F6893689AFF9A686868A1FFFF9A6868686FFFFFFF
%6F93686F689AFD04FF9A6868FD22FFCA93689AFD04FF9A93689A6F93689A
%FFCA6FFFA1936F9368936F9368C3FFFF93936F9368936893689368936893
%688C689368936893689368936F9368936893CAFF6893689368CAFFFF9393
%68936FC3FFC3689368C3FD04FF9A8C68FD24FFA893689AFD04FFA193686F
%688CA1FF68CAFF9A689368936893689AA8FFFF9368936FA19A9A9A936893
%6868688C6868688C689368939AA1A1FFA89A68936FFFA193689368936FFF
%FF9A6893689368936F8C68A1FD04FF766868CAFD25FFA893689AFD04FFA8
%93689368C3CAC3FFCA689368936893689ACA93A8FF939368939AFFFFC3A8
%FF9A8C9AC3A1C3A1CAA19368C3FFFFA1939AFFFF9A689AFFFF6893689368
%93A1FF9A9368936893688C6FCAFD04FF93686FFD28FFA8936893A8FFFFFF
%A89A686868A1CAA16893686F68936893A89368FFFF93686F689AFFFF6893
%CAFF6F93A1FFA893A1FFA89368A1FFC36868A1FFA1686FFFFF9A6893686F
%68A1FF9A6893686F68686FFD04FFCA6F686FCAFD2AFF9A6893A8FD04FFC3
%6893689368936F9368936893A8FFA19AFFFF939368939AFFCA9368CAFFCA
%689AFFFF688CA8FFA18C9AFFCA9368CAFFA16893CAFFCA9368936893A1FF
%6F936F936893A1FD04FFCA688C93FD2DFF9A688C9AFD04FFCA6F8C689368
%93686F6893A8A1689AA1FFCA93689368A1FFCA6893A8FFA16893FFA89368
%A1FFCA6893FFFF6F93CAC3686F689AFFFFA19368686FFF9A686893689AA8
%FD04FFA168689AFD2FFFC3688C9AFD05FFA1936893689393A1CAFF689368
%93FFFF6F936893A1FFA89AA1FFFF9A689AFFFF6893FFFF9A936FFFFFCAFF
%FF9A93689368C3FFFFCAC3A1CAA193688C6FCAFD04FFCA9A6893A1FD31FF
%CA686868A1FD04FFA8A168686893A1CAA89368686FFFCA93689368CAFFCA
%A1CAA19368686FFFFFA1A8FF9A686868A1FF9A9AFFFFA1936868689AA1CA
%A8C36F6868939AFD05FFA1936893A1FD34FF9A8C689ACAFD05FF9A93688C
%689A93936FCAFFFF68936893FFFF9A8C68936893689AFFFF9A9A6F936893
%68A1FFCA689AFFFFA893689368936893688C68A1CAFD05FF9A8C689AFD37
%FFA1936893A1FD05FFA8A1686868936893A1FFFF9A688C6FFFFF93686F68
%9368686FFFFF936893689368936FFFCA93689AFFFFCAA16893686868939A
%CAFD05FFA1686868CAFD3AFF9A688C93CAFD06FFA19A6893688C689AA193
%6FCAFFFF9393689368936893FFFF6F9368936893689AFFFFA19A689A9A9A
%6F93689393C3CAFD05FFA19368939AFD3DFFCA6F686893A1FD06FFCA9A93
%FD056893769AA1A16893686F6893A1FFFFC36F686893686F9ACA9A9A6893
%FD04686F9AA1FD06FFCA6F686893A1FD40FFA19A688C93CAFD07FFCA9A9A
%6F93688C688C68936F93689393C39AC3A19368936F936893688C68936893
%93C3A8FD07FFA19A688C93CAFD44FFA16F6868939AFD09FFA1A16F936868
%688C68686893FD07688C686868936F9A9ACAA8FD07FFA8A16F686893A1FD
%48FFA19A6868689AA1FD0BFFA8C39AA19A9A6F9A939A6FFD049AC3A1CAA8
%FD0AFFCA9A93688C6FCAFD4CFFCA9A936868689AA1FD0FFFA8FFFFFFA8FD
%0DFFA8A16F936868689AA8FD50FFCACA9A93688C689A9ACACAFD19FFA1C3
%9393688C6F9AA1FD56FFCAA19A93686868936F9A9AC3A1CAA8FD07FFCAFF
%CACAA1CAA19A6F936868688C6F9AA1FD5DFFCAA19A6F936868688C689368
%93939A6F9A93936F936893688C6893689A9AC3A8FD64FFA8CAA1A1769A6F
%93689368686893686868936F9A9AC3A8FD34FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(R=255 G=255 B=255)
Pc
0.129412 1 1 0.031373 0.807843 0.090196 0.090196 (R=206 G=23 B=23) 0 1 Xk
(R=206 G=23 B=23)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
u
u
1 D
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 4 M []0 d0 XR
199.998 353.1992 m
115.3896 353.1992 46.7988 284.6104 46.7988 200 c
46.7988 115.3896 115.3896 46.8008 199.998 46.8008 c
284.6074 46.8008 353.2012 115.3896 353.2012 200 c
353.2012 284.6104 284.6074 353.1992 199.998 353.1992 c
f
u
*u
0.129412 1 1 0.031373 0.807843 0.090196 0.090196 (R=206 G=23 B=23) 0 1 Xk
199.998 353.1992 m
115.3896 353.1992 46.7988 284.6104 46.7988 200 c
46.7988 115.3896 115.3896 46.8008 199.998 46.8008 c
284.6074 46.8008 353.2012 115.3896 353.2012 200 c
353.2012 284.6104 284.6074 353.1992 199.998 353.1992 c
f
0 D
199.998 51.1348 m
117.7842 51.1348 51.1348 117.7881 51.1348 200 c
51.1348 282.2158 117.7842 348.8613 199.998 348.8613 c
282.2109 348.8613 348.8633 282.2158 348.8633 200 c
348.8633 117.7881 282.2109 51.1348 199.998 51.1348 c
f
*U
U
199.998 304.1992 m
241.7305 304.1992 277.7168 279.6553 294.3496 244.2246 C
333.7129 244.2246 L
315.168 300.3232 262.3145 340.8086 199.998 340.8086 c
137.6816 340.8086 84.8291 300.3232 66.2822 244.2246 C
105.6445 244.2246 L
122.2832 279.6553 158.2666 304.1992 199.998 304.1992 c
f
199.998 95.8008 m
158.2666 95.8008 122.2813 120.3486 105.6445 155.7754 C
66.2822 155.7754 L
84.8271 99.6768 137.6816 59.1953 199.998 59.1953 c
262.3145 59.1953 315.168 99.6768 333.7129 155.7754 C
294.3496 155.7754 L
277.7168 120.3486 241.7305 95.8008 199.998 95.8008 c
f
135.8936 264.1094 m
152.3018 280.5137 174.96 290.6553 199.998 290.6553 c
225.0352 290.6553 247.6934 280.5137 264.1035 264.1094 c
269.9824 258.2266 275.0391 251.5313 279.1309 244.2246 C
282.2969 244.2246 L
266.5293 273.5146 235.5898 293.4199 199.998 293.4238 c
164.4043 293.4199 133.4688 273.5146 117.6973 244.2246 C
120.8652 244.2246 L
124.958 251.5313 130.0146 258.2266 135.8936 264.1094 c
f
264.1035 135.8994 m
247.6934 119.4902 225.0352 109.3447 199.998 109.3447 c
174.96 109.3447 152.3018 119.4902 135.8936 135.8994 c
130.0146 141.7773 124.959 148.4688 120.8652 155.7754 C
117.6982 155.7754 L
133.4688 126.4893 164.4043 106.5801 199.998 106.5801 c
235.5879 106.5801 266.5293 126.4893 282.2969 155.7754 C
279.1309 155.7754 L
275.0352 148.4688 269.9824 141.7773 264.1035 135.8994 c
f
130.2827 155.8613 m
144.915 132.792 170.6582 117.4668 199.999 117.4668 c
229.3408 117.4668 255.084 132.792 269.7168 155.8613 C
130.2827 155.8613 L
f
64.6855 235.7393 m
64.6855 237.6543 L
337.0176 237.6543 L
337.0176 235.7393 L
64.6855 235.7393 L
64.6855 235.7393 L
f
64.6855 162.8037 m
64.6855 164.7266 L
337.0176 164.7266 L
337.0176 162.8037 L
64.6855 162.8037 L
64.6855 162.8037 L
f
U
U
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(Layer 3) Ln
0 A
u
*u
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 4 M []0 d0 XR
93.2793 148.5947 m
93.9858 148.9531 94.5591 149.4287 94.29 149.958 c
94.1411 150.2529 93.9175 150.6201 93.4126 151.1787 c
92.2695 152.4121 L
92.1655 152.5439 92.1055 152.6621 92.1934 152.7803 c
92.6777 153.2852 L
92.7656 153.4033 92.8984 153.4336 93.1206 153.2871 c
100.2495 147.9111 L
100.4424 147.749 100.605 147.6475 100.7095 147.4414 c
100.7993 147.2646 100.6377 147.0713 100.4023 146.9521 c
100.167 146.833 95.501 144.5781 91.7041 142.6533 c
90.4678 142.0264 L
88.937 141.25 83.8896 138.6543 83.5654 138.4902 c
82.0498 137.6846 81.9038 137.4619 82.6499 135.9902 c
83.187 134.9307 L
83.2915 134.7246 83.248 134.5918 83.1006 134.5176 c
82.3354 134.1289 L
82.1885 134.0547 82.0845 134.1133 81.9653 134.3496 c
81.8608 134.5557 79.9194 138.6035 79.666 139.1035 c
79.2329 139.957 77.0405 144.0625 76.9658 144.209 c
76.8765 144.3857 76.9058 144.4746 77.0527 144.5488 c
77.8477 144.9521 L
78.0239 145.041 78.1431 144.8799 78.2622 144.6445 c
78.6504 143.8789 L
79.4712 142.2598 79.7832 141.8633 81.3145 142.5654 c
82.5806 143.1338 85.8032 144.8047 86.8628 145.3418 C
93.2793 148.5947 l
f
*U
*u
103.0137 123.1543 m
96.8428 118.7939 92.0381 118.3887 89.2959 122.2686 c
85.9443 127.0117 90.2012 132.0801 93.623 134.498 c
99.6323 138.7451 105.2676 139.5762 108.0859 135.5879 c
111.6279 130.5752 107.1094 126.0488 103.0137 123.1543 c
f
1 D
104.1172 135.0859 m
101.8452 134.127 98.8413 132.4893 96.6045 130.9082 c
94.0449 129.0996 92.1001 127.5635 91.1699 126.4209 c
89.9385 124.9043 89.7344 123.9922 90.4199 123.0225 c
91.0674 122.1064 92.0063 121.9209 93.3901 122.5352 c
94.8818 123.2266 97.0059 124.5654 100.9404 127.3457 c
105.4673 130.5449 108.1235 133.1904 107.0762 134.6719 c
106.4097 135.6152 105.2935 135.5938 104.1172 135.0859 c
f
*U
*u
0 D
115.3716 109.8125 m
109.8994 104.6025 105.2051 103.5049 101.9287 106.9453 c
97.9248 111.1514 101.3999 116.7832 104.4346 119.6729 c
109.7637 124.7461 115.2178 126.3857 118.585 122.8496 c
122.8169 118.4053 119.0034 113.2705 115.3716 109.8125 c
f
1 D
114.7314 121.7773 m
112.623 120.498 109.8887 118.4424 107.9058 116.5537 c
105.6353 114.3926 103.9346 112.5908 103.1797 111.3252 c
102.1816 109.6465 102.1123 108.7148 102.9312 107.8545 c
103.7051 107.042 104.6606 106.9951 105.9404 107.8037 c
107.3164 108.7031 109.2231 110.3369 112.7119 113.6582 c
116.7266 117.4805 118.9702 120.4824 117.7192 121.7969 c
116.9229 122.6338 115.8213 122.4502 114.7314 121.7773 c
f
*U
*u
0 D
114.9678 95.624 m
114.9268 95.7354 114.9048 95.873 114.9629 95.9531 c
115.0405 96.0605 115.1982 96.1084 115.3755 96.1836 c
138.6348 105.668 L
138.7661 105.7354 138.897 105.8037 139.0034 105.7256 c
139.0835 105.668 139.1445 105.583 139.1855 105.4717 c
139.6563 104.4365 L
139.6973 104.3252 139.6851 104.252 139.627 104.1719 c
139.5884 104.1182 139.5034 104.0576 139.3262 103.9814 c
115.8701 94.3955 L
115.7393 94.3281 115.5547 94.2988 115.4751 94.3574 c
115.395 94.415 115.334 94.5 115.3198 94.5928 C
114.9678 95.624 l
f
119.6406 110.9131 m
121.7754 113.8486 125.126 115.8184 128.2754 113.5283 c
131.6646 111.0635 129.937 107.3418 128.2871 105.0732 c
125.7256 101.5508 122.7583 100.4443 119.8228 102.5791 c
116.353 105.1025 118.5342 109.3916 119.6406 110.9131 c
f
1 D
122.46 103.6807 m
123.1318 104.2119 123.9785 105.4326 125.6865 107.7813 c
127.8994 110.8232 128.0981 112.1064 127.4575 112.5723 c
127.0308 112.8828 126.4897 112.8682 125.8296 112.4102 c
124.8228 111.7549 123.418 109.8799 122.5835 108.7324 c
121.5742 107.3447 120.8052 106.2305 120.4751 105.3281 c
120.1694 104.5713 120.2666 103.8066 120.667 103.5156 c
121.2808 103.0693 121.9307 103.29 122.46 103.6807 c
f
0 D
126.1377 95.0488 m
128.2729 97.9844 131.6235 99.9541 134.7725 97.6641 c
138.1616 95.1992 136.4346 91.4775 134.7847 89.209 c
132.2227 85.6865 129.2554 84.5801 126.3198 86.7148 c
122.8506 89.2383 125.0313 93.5273 126.1377 95.0488 c
f
1 D
128.957 87.8164 m
129.6289 88.3477 130.4756 89.5684 132.1836 91.916 c
134.3965 94.959 134.5952 96.2422 133.9551 96.708 c
133.5278 97.0186 132.9868 97.0039 132.3267 96.5459 c
131.3198 95.8906 129.9155 94.0146 129.0806 92.8672 c
128.0713 91.4795 127.3022 90.3662 126.9722 89.4639 c
126.6665 88.707 126.7637 87.9424 127.1641 87.6514 c
127.7778 87.2051 128.4282 87.4258 128.957 87.8164 c
f
*U
*u
0 D
152.3472 83.6455 m
151.8643 83.083 148.8149 79.375 148.458 78.3818 c
148.2124 77.6982 148.2241 76.8525 149.1558 76.5186 c
150.2427 76.1279 L
150.5532 76.0166 150.5396 75.8809 150.4951 75.7568 c
150.2495 75.0732 L
150.1602 74.8252 150.0957 74.7432 149.8472 74.832 c
149.4438 74.9775 148.2041 75.5283 145.6577 76.4424 c
143.3911 77.2568 142.6743 77.4092 142.2397 77.5654 c
142.0537 77.6318 142.0894 77.8291 142.1675 78.0469 c
142.3794 78.6367 L
142.4463 78.8232 142.5107 78.9053 142.6973 78.8379 c
143.5044 78.5479 L
144.2495 78.2803 145.1509 78.4473 146.1069 79.1563 c
146.7759 79.6523 150.9214 84.2627 152.9272 86.627 c
153.3989 87.1592 158.3125 92.9316 158.8931 93.6699 c
159.0977 93.9473 159.3979 94.2949 159.3032 94.7148 c
159.2549 94.8721 159.186 95.0723 159.231 95.1963 c
159.2642 95.2891 159.3711 95.3916 159.6416 95.3643 c
160.7134 95.2246 163.022 95.3066 163.6772 95.667 c
163.8882 95.7666 164.0259 95.8574 164.1812 95.8018 c
164.3677 95.7354 164.3628 95.5264 164.333 95.1514 c
164.2207 92.9834 164.144 85.1572 164.02 82.958 c
163.8643 80.2793 163.8081 73.7793 163.9414 72.7842 c
164.1016 71.5703 164.7749 70.9072 165.2407 70.7402 c
166.2964 70.3613 L
166.4824 70.2939 166.4692 70.1592 166.4131 70.0039 c
166.2012 69.4131 L
166.1343 69.2275 166.0254 69.0215 165.7769 69.1104 c
165.187 69.3223 164.5684 69.6494 160.5938 71.0771 c
158.0161 72.0029 156.896 72.3008 156.2749 72.5234 c
155.9648 72.6348 156.0005 72.832 156.0786 73.0498 c
156.2905 73.6396 L
156.3462 73.7949 156.4219 73.9082 156.5771 73.8525 c
157.4468 73.54 L
158.2852 73.2393 158.6758 73.4492 158.7798 74.3232 c
158.9019 75.541 159.1187 79.9512 159.1475 81.2031 C
152.3472 83.6455 l
f
1 D
159.314 82.5449 m
159.3691 83.5771 159.8799 90.7559 159.9409 91.6104 c
159.9844 92.1211 160 92.3604 159.8447 92.416 c
159.6587 92.4834 159.521 92.3926 159.3271 92.1465 c
159.0269 91.7988 153.7241 85.4297 153.1968 84.7422 C
159.314 82.5449 l
f
*U
*u
0 D
179.1187 75.8154 m
178.8818 74.2822 178.23 69.8428 178.2021 69.4463 c
178.1563 68.7188 178.4321 68.3428 178.9541 68.2617 c
180.6172 68.0049 L
180.8452 67.9697 180.8628 67.8672 180.8428 67.7363 c
180.7114 66.8887 L
180.6865 66.7256 180.6387 66.6328 180.3779 66.6729 c
179.9214 66.7441 178.9258 66.998 175.1104 67.5869 c
172.2412 68.0303 170.9541 68.1289 170.5957 68.1836 c
170.3672 68.2188 170.3496 68.3223 170.3701 68.4521 c
170.5059 69.333 L
170.5313 69.4961 170.5737 69.5557 170.7368 69.5313 c
171.5845 69.4004 L
172.6934 69.2285 172.9468 69.3564 173.1704 70.1563 c
173.2534 70.4775 174.1367 75.5498 174.7207 79.332 c
175.2998 83.082 L
175.6323 85.2344 176.1284 88.6631 176.1563 89.0596 c
176.1914 89.7217 175.8755 89.8369 175.2236 89.9375 c
173.6909 90.1748 L
173.5278 90.1992 173.5054 90.2695 173.5356 90.4658 c
173.6665 91.3135 L
173.6914 91.4766 173.7344 91.5361 173.8975 91.5107 c
174.2559 91.4551 175.415 91.1768 178.8389 90.6475 c
179.4258 90.5566 181.3647 90.3574 182.4404 90.1924 c
186.4512 89.5723 188.3247 88.9492 189.9897 87.1904 c
191.1978 85.9355 191.8892 83.9258 191.5566 81.7734 c
190.9526 77.8604 187.4092 75.6699 181.9312 76.5156 c
180.9204 76.6719 180.1753 76.8203 179.3052 77.0215 C
179.1187 75.8154 l
f
1 D
179.5015 78.293 m
180.1938 78.0195 180.9385 77.8711 181.4604 77.79 c
182.4712 77.6348 184.2627 78.4258 185.1563 79.457 c
185.9644 80.3672 186.2861 81.5859 186.4727 82.792 c
187.1675 87.292 184.0527 88.7412 182.7158 88.9473 c
182.1616 89.0332 181.7651 89.0615 181.1582 89.0215 C
179.5015 78.293 l
f
*U
*u
0 D
202.1934 74.0664 m
202.2363 72.5166 202.3936 68.0303 202.4375 67.6357 c
202.5234 66.9121 202.8633 66.5908 203.3906 66.6055 c
205.0732 66.6523 L
205.3047 66.6582 205.3398 66.5605 205.3438 66.4287 c
205.3672 65.5713 L
205.3721 65.4063 205.3418 65.3057 205.0781 65.2988 c
204.6162 65.2861 203.5908 65.3564 199.731 65.249 c
196.8276 65.1689 195.5439 65.0342 195.1812 65.0244 c
194.9502 65.0176 194.9141 65.1152 194.9106 65.248 c
194.8857 66.1387 L
194.8813 66.3037 194.9126 66.3701 195.0776 66.375 c
195.9351 66.3984 L
197.0566 66.4297 197.2832 66.6016 197.3594 67.4287 c
197.3833 67.7598 197.3394 72.9082 197.2329 76.7354 c
197.1279 80.5293 L
197.0674 82.7061 196.938 86.1689 196.894 86.5645 c
196.8101 87.2227 196.478 87.2793 195.8184 87.2607 c
194.2681 87.2178 L
194.103 87.2129 194.0684 87.2783 194.0625 87.4766 c
194.0391 88.334 L
194.0342 88.499 194.0654 88.5654 194.2305 88.5664 c
194.5933 88.5771 195.7837 88.5107 199.2476 88.6064 c
199.8413 88.623 201.7852 88.7764 202.874 88.8105 c
206.9316 88.9229 208.8867 88.6465 210.8418 87.2158 c
212.2559 86.1982 213.2979 84.3457 213.3584 82.168 c
213.4688 78.209 210.377 75.416 204.834 75.2627 c
203.8115 75.2344 203.0518 75.2461 202.1592 75.2871 C
202.1934 74.0664 l
f
1 D
202.124 76.5742 m
202.8545 76.4287 203.6133 76.417 204.1416 76.4316 c
205.1641 76.46 206.7842 77.5615 207.4785 78.7363 c
208.1094 79.7773 208.207 81.0342 208.1729 82.2549 c
208.0469 86.8076 204.7207 87.6729 203.3682 87.6357 c
202.8076 87.6201 202.4131 87.5762 201.8223 87.4277 C
202.124 76.5742 l
f
*U
*u
0 D
219.0977 81.5137 m
218.5615 83.8965 218.0977 85.957 217.8701 86.8193 c
217.5986 87.874 217.0566 88.3271 216.6055 88.2256 c
215.3184 87.9355 L
215.1572 87.8994 215.1035 87.9893 215.0742 88.1182 c
214.8779 88.9873 L
214.8418 89.1484 214.8594 89.2197 215.0205 89.2549 c
215.3105 89.3203 216.3301 89.4482 219.8398 90.2383 c
221.6426 90.6445 224.4541 91.3789 225.7744 91.6768 c
228.2852 92.2422 230.3555 91.7607 231.9512 90.835 c
233.3496 90.0332 234.3086 88.9297 234.5762 87.7383 c
235.4971 83.6494 232.8516 81.126 230.0762 80.2305 c
230.127 80.0049 L
231.1973 79.9072 231.8506 79.4121 232.6357 78.7773 c
233.1709 78.3564 235.5869 75.8896 235.9307 75.5605 c
236.1895 75.3145 238.4785 73.2588 239.2891 72.6631 c
239.7705 72.332 241.0518 72.3496 241.792 72.5166 c
242.0176 72.5674 242.0781 72.4453 242.1074 72.3174 c
242.2813 71.5439 L
242.3252 71.3506 242.3145 71.2471 242.0889 71.1963 c
241.832 71.1387 240.9727 71.0469 238.4932 70.4883 c
237.5596 70.2783 236.3828 69.9453 235.457 69.7031 c
234.3242 70.2266 231.4873 73.5117 230.6934 74.4834 c
229.1064 76.4258 227.25 78.5117 225.7041 78.1641 c
224.6094 77.917 L
224.9795 76.2754 L
225.4072 74.376 226.3154 70.791 226.4736 70.3877 c
226.6904 69.7256 227.0781 69.2041 227.5615 69.3125 c
228.8818 69.6104 L
229.1064 69.6611 229.1611 69.5713 229.1973 69.4102 c
229.3711 68.6377 L
229.4219 68.4121 229.4043 68.3408 228.9209 68.2324 c
228.8887 68.2246 228.0625 68.1406 224.6816 67.3789 c
221.2686 66.6113 220.5498 66.3477 220.1963 66.2676 c
219.9385 66.21 219.917 66.3066 219.8662 66.5322 c
219.6992 67.2725 L
219.6631 67.4336 219.6406 67.5303 219.8018 67.5664 c
220.7676 67.7832 L
221.4766 67.9434 222.0049 68.2988 221.8242 69.1035 c
221.1709 72.3057 220.4893 75.332 219.8008 78.3906 C
219.0977 81.5137 l
f
1 D
224.3877 79.0518 m
225.0068 79.1572 225.3936 79.2441 225.6836 79.3086 c
229.9326 80.2656 230.0176 84.5469 229.6768 86.0605 c
229.3438 87.541 228.5098 88.8418 227.6416 89.3906 c
226.251 90.1602 224.7148 90.2207 223.749 90.0029 c
223.2021 89.8799 222.7979 89.7207 222.5908 89.4375 c
222.4268 89.2656 222.4102 88.8896 222.4326 88.4893 C
224.3877 79.0518 l
f
*U
*u
0 D
250.082 76.2783 m
247.3574 76.5674 243.5723 78.7285 241.5254 83.0898 c
240.6699 84.9131 239.8154 87.9756 240.8115 91.834 c
241.9404 96.2646 245.0361 98.4463 247.7246 99.709 c
250.2051 100.8721 252.6875 101.5635 256.123 100.7695 c
259.2344 100.043 262.4736 97.8809 264.4092 93.7578 c
265.4326 91.5771 265.8105 88.9834 265.2393 86.1631 c
264.4326 82.832 262.7344 79.8467 258.0137 77.6318 c
255.9531 76.6641 253.1289 75.9219 250.082 76.2783 c
f
1 D
259.8301 91.3174 m
256.7588 97.8604 250.7744 99.4258 248.2646 98.248 c
247.667 97.9678 246.1035 97.416 245.1084 94.7979 c
244.1309 92.2979 244.707 88.7402 245.8564 86.29 c
249.4463 78.6416 255.1143 77.9844 257.5938 79.1475 c
263.1211 81.7422 260.9805 88.8672 259.8301 91.3174 c
f
*U
*u
0 D
271.2178 113.6592 m
271.1182 113.79 271.1045 113.8633 271.2363 113.958 c
271.4736 114.1367 272.7451 114.9717 274.5107 116.3027 c
276.9619 118.1504 277.5605 118.7256 277.7979 118.9092 c
277.9561 119.0283 278.0225 118.9961 278.1611 118.8115 c
278.6582 118.1523 L
278.7373 118.0469 278.7705 117.9482 278.6123 117.8291 c
278.0068 117.3721 L
277.5586 117.0342 276.8809 116.2334 277.0898 114.5313 c
277.3867 111.9453 278.5977 107.9814 279.2646 105.0127 c
279.6787 103.0928 282.0254 93.7852 282.1543 92.6836 c
282.208 92.2285 282.1758 91.9971 281.8857 91.7783 c
281.543 91.5205 281.1992 91.7568 280.7832 91.9805 c
278.2383 93.3271 271.0322 97.8965 268.9238 99.1582 c
266.8154 100.4209 262.6172 103.248 261.7441 103.748 c
261.0234 104.1553 260.5088 104.1807 259.9551 103.7627 c
259.2705 103.2461 L
259.165 103.167 259.0391 103.2793 258.9395 103.4111 c
258.4629 104.043 L
258.3633 104.1748 258.3506 104.2471 258.5088 104.3623 c
258.7725 104.5605 259.7012 105.1377 262.8633 107.5215 c
265.6045 109.5879 266.7305 110.5605 266.9678 110.7441 c
267.2051 110.9229 267.291 110.8633 267.4102 110.7051 c
267.8672 110.0996 L
267.9658 109.9678 268.0195 109.8428 267.835 109.7031 c
266.7012 108.8486 L
266.0693 108.3721 265.7871 107.7051 266.0449 107.3623 c
266.2041 107.1514 266.4424 106.835 266.7998 106.5264 c
267.7256 105.7363 271.0918 103.3555 272.7969 102.2441 c
273.875 101.5273 278.1123 98.6465 279.2305 97.877 c
279.3359 97.957 L
278.7686 100.2988 277.5762 104.5664 277.2041 105.7734 c
276.7314 107.4414 275.8789 110.2715 275.4072 111.7754 c
275.1533 112.6592 274.8164 113.1064 274.5771 113.4229 c
274.3389 113.7393 273.6055 114.0537 272.8418 113.4775 c
272.0244 112.8623 L
271.9189 112.7822 271.833 112.8418 271.7139 113 C
271.2178 113.6592 l
f
*U
*u
289.958 116.7549 m
290.9746 117.8818 291.874 119.0264 292.0654 119.3867 c
292.3438 119.8926 292.4326 120.4346 292.3232 121.2002 c
292.1992 121.8008 291.7783 122.7139 291.3125 123.1348 c
291.1406 123.2891 291.1582 123.4072 291.2686 123.5293 c
291.9395 124.125 L
292.0742 124.2246 292.1875 124.3008 292.3125 124.1436 c
292.6621 123.6943 293.9365 122.5449 294.7939 121.7705 c
295.8975 120.7764 297.1621 119.8125 297.7207 119.3975 c
297.8896 119.2891 297.8262 119.1689 297.7402 119.0244 c
297.332 118.3262 L
297.2676 118.2061 297.1748 118.2012 296.959 118.3066 c
296.4785 118.5625 295.6934 118.8262 295.2666 118.9443 c
294.5576 119.0947 293.709 118.7939 293.1934 118.3701 c
292.498 117.7969 291.7637 117.0811 290.791 116.0029 c
292.2607 114.6768 L
293.584 113.4824 296.0723 111.4609 296.5127 111.0625 c
297.7871 109.9131 298.4717 109.7842 298.9063 109.9707 c
299.3848 110.2051 299.8789 110.6045 300.9844 111.8301 c
301.3604 112.2461 302.2637 113.2979 302.6797 113.8564 c
303.0723 114.3906 303.4912 115.3477 303.5508 116.4482 c
303.6113 117.5498 303.3301 120.293 303.1846 121.3145 c
303.1748 121.5 303.2168 121.5957 303.332 121.625 c
303.9521 121.8213 L
304.0898 121.875 304.1855 121.833 304.2373 121.7422 c
306.9424 117.3008 L
307.0967 117.0283 307.0889 116.7236 306.8232 116.4297 c
306.7129 116.3076 306.2021 115.79 304.7627 114.2441 c
303.3252 112.6514 300.957 110.0762 297.1318 105.8359 c
296.3145 104.9297 295.7197 104.2217 295.2773 103.7314 c
294.8379 103.1943 294.5752 102.8535 294.376 102.6328 c
294.2207 102.4619 294.1035 102.4785 293.9072 102.6563 c
293.3926 103.1201 L
293.2451 103.2529 293.2383 103.3926 293.3936 103.5645 c
294.0566 104.2998 L
295.0732 105.4268 294.9902 105.6797 294.1328 106.4531 c
285.9229 113.8604 L
283.8896 115.6953 280.8311 118.3662 280.5635 118.5625 c
279.6914 119.1719 279.2988 119.082 278.7012 118.4199 c
277.8389 117.4639 L
277.751 117.3662 277.6553 117.4082 277.4834 117.5625 c
276.8955 118.0938 L
276.8223 118.1602 276.7461 118.2725 276.8789 118.4199 c
277.3652 118.959 278.2129 119.75 280.2246 121.9805 c
287.9609 130.6035 L
288.3145 130.9961 288.6855 131.5059 288.7959 131.6279 c
288.9063 131.751 289 131.7559 289.0957 131.7139 c
289.5273 131.502 293.6143 129.2822 293.9473 129.1592 c
294.1143 129.0977 294.1631 129.0527 294.126 128.8643 c
293.9688 128.2949 L
293.9287 128.1533 293.7939 128.0527 293.6055 128.0898 c
293.2988 128.1436 289.1025 127.9287 288.251 127.6738 c
287.4688 127.4473 286.5313 127.0479 285.9092 126.4092 c
282.8926 123.2627 L
289.958 116.7549 l
f
*U
*u
299.4854 131.8789 m
298.7432 132.3105 294.6445 134.582 294.1836 134.7744 c
293.4492 135.0869 293.1191 134.7832 292.8369 134.2979 c
292.0068 132.8721 L
291.9238 132.7295 291.8457 132.6602 291.6738 132.7598 c
290.8477 133.2412 L
290.7334 133.3076 290.7549 133.4102 290.8213 133.5244 c
291.0371 133.8955 291.8525 135.1006 293.5127 137.9531 c
293.9443 138.6943 295.5195 141.5967 295.9014 142.251 c
298.1592 146.1289 300.2939 149.0098 304.124 150.4082 c
306.7881 151.377 309.9189 151.3105 313.2275 149.3848 c
316.5068 147.4756 318.126 145.2734 319.084 142.1953 c
320.4678 137.6865 317.6582 132.793 316.6123 130.998 c
316.3467 130.542 314.3018 127.2256 313.3887 125.6572 c
311.9443 123.1758 311.3662 121.9844 311.1338 121.585 c
311.0508 121.4424 310.96 121.4189 310.7607 121.5352 c
310.0195 121.9668 L
309.9053 122.0332 309.8975 122.1514 309.9805 122.2939 c
310.8438 123.7773 L
311.1592 124.3193 311.1143 124.7656 310.6904 125.0879 c
310.1416 125.5225 303.791 129.3721 301.624 130.6338 C
299.4854 131.8789 l
f
1 D
304.7412 134.5459 m
305.1123 134.3301 309.9775 131.5361 311.7617 130.5361 c
312.332 130.2041 312.8555 130.0518 313.6123 130.1074 c
314.3252 130.1514 315.0605 131.0205 315.625 131.9902 c
316.5879 133.6445 317.0391 136.3223 315.9346 138.9502 c
315.0879 140.9707 313.2637 143.2168 310.6113 144.7607 c
308.2725 146.1221 305.3125 146.5469 303.0498 146.0693 c
300.4873 145.5381 298.1133 143.5596 297.1504 141.9053 c
296.6855 141.1064 296.4648 140.6621 296.4492 140.1758 c
296.3994 139.6309 296.79 139.252 297.3438 138.8906 c
298.5244 138.165 302.2607 135.9902 302.7168 135.7246 C
304.7412 134.5459 l
f
*U
U
u
*u
0 D
119.3711 288.2158 m
119.6099 287.5073 121.248 282.9507 121.9248 282.1284 c
122.3901 281.563 123.1289 281.1367 123.8999 281.771 c
124.7993 282.5112 L
125.0562 282.7227 125.1665 282.6411 125.251 282.5381 c
125.7163 281.9731 L
125.8853 281.7676 125.9233 281.6689 125.7178 281.5 c
125.3838 281.2251 124.2666 280.4351 122.1597 278.7007 c
120.2837 277.1572 119.7817 276.6147 119.4224 276.3184 c
119.2681 276.1919 119.1152 276.3247 118.9673 276.5044 c
118.5654 276.9927 L
118.4385 277.147 118.4009 277.2451 118.5552 277.3721 c
119.2231 277.9219 L
119.8398 278.4297 120.1606 279.2969 120.04 280.4907 c
119.9556 281.3262 118.1001 287.2988 117.0869 290.2583 c
116.8696 290.9414 114.4038 298.1787 114.064 299.063 c
113.9297 299.3833 113.7832 299.8232 113.3706 299.958 c
113.209 299.9971 113.0005 300.041 112.916 300.144 c
112.8525 300.2207 112.8193 300.3662 112.9824 300.5864 c
113.6567 301.4434 114.7773 303.4858 114.8032 304.2402 c
114.8257 304.4741 114.8184 304.6406 114.9468 304.7461 c
115.1011 304.873 115.2793 304.7612 115.5889 304.542 c
117.4097 303.3252 124.1514 299.2188 125.9932 297.9761 c
128.2334 296.458 133.8374 293.0532 134.7681 292.6558 c
135.9028 292.1675 136.8247 292.4087 137.21 292.7261 c
138.084 293.4453 L
138.2383 293.5718 138.3481 293.4902 138.4541 293.3618 c
138.856 292.8735 L
138.9829 292.7197 139.105 292.5186 138.8999 292.3496 c
138.4116 291.9478 137.8086 291.5806 134.5195 288.8735 c
132.3867 287.1182 131.5508 286.3008 131.0366 285.8779 c
130.7798 285.6665 130.627 285.7993 130.479 285.979 c
130.0771 286.4673 L
129.9717 286.5957 129.9126 286.7197 130.041 286.8257 c
130.7607 287.418 L
131.4541 287.9888 131.4741 288.436 130.77 288.9771 c
129.7773 289.7119 126.0684 292.1763 124.9985 292.8477 C
119.3711 288.2158 l
f
1 D
123.9214 293.6851 m
123.0557 294.2656 117.0986 298.4141 116.3896 298.9082 c
115.9697 299.209 115.7705 299.3467 115.6421 299.2407 c
115.4878 299.1138 115.4951 298.9478 115.6084 298.6528 c
115.7549 298.2134 118.5361 290.3301 118.8594 289.5186 C
123.9214 293.6851 l
f
*U
*u
0 D
141.0596 303.4136 m
141.8164 302.0444 144.0347 298.0986 144.2568 297.7656 c
144.6694 297.1567 145.1216 297.0264 145.5879 297.2842 c
147.0732 298.105 L
147.2773 298.2178 147.3545 298.1465 147.4189 298.0298 c
147.8374 297.2725 L
147.918 297.127 147.9375 297.0234 147.7041 296.8945 c
147.2964 296.6694 146.3452 296.2578 142.937 294.374 c
140.3735 292.9575 139.2861 292.2422 138.9653 292.0654 c
138.7617 291.9526 138.6841 292.0239 138.6196 292.1401 c
138.1851 292.9268 L
138.1045 293.0723 138.1016 293.147 138.2471 293.2275 c
139.0044 293.646 L
139.9951 294.1934 140.1182 294.4517 139.8032 295.228 c
139.6714 295.5356 137.2476 300.1279 135.3804 303.5068 c
133.5288 306.8564 L
132.4663 308.7793 130.7471 311.8218 130.5249 312.1553 c
130.1445 312.7056 129.8213 312.6025 129.2383 312.2808 c
127.8696 311.5239 L
127.7236 311.4438 127.6626 311.4858 127.5659 311.6606 c
127.1475 312.418 L
127.0669 312.5635 127.064 312.6382 127.2095 312.7188 c
127.5298 312.896 128.627 313.3882 131.6851 315.0786 c
132.2095 315.3682 133.8799 316.4053 134.8413 316.936 c
138.4238 318.916 140.3037 319.5747 142.7178 319.1978 c
144.4561 318.9414 146.2476 317.7642 147.3101 315.8418 c
149.2417 312.3462 147.7656 308.4121 142.8716 305.7075 c
141.9688 305.2085 141.2827 304.8677 140.4639 304.4912 C
141.0596 303.4136 l
f
1 D
139.8364 305.627 m
140.5576 305.8354 141.2437 306.1768 141.7095 306.4346 c
142.6128 306.9336 143.5542 308.6704 143.6313 310.0439 c
143.7148 311.269 143.2197 312.4404 142.624 313.5181 c
140.4023 317.5381 137.0229 316.7729 135.8286 316.1128 c
135.3335 315.8394 135 315.6167 134.54 315.2104 C
139.8364 305.627 l
f
*U
*u
0 D
160.6333 312.3901 m
161.1333 310.9077 162.6113 306.6289 162.7705 306.2607 c
163.0674 305.5884 163.4893 305.3794 163.9937 305.5493 c
165.6025 306.0918 L
165.8232 306.1665 165.8867 306.0825 165.9292 305.9561 c
166.2056 305.1362 L
166.2588 304.9785 166.2593 304.873 166.0068 304.7881 c
165.5654 304.6392 164.5557 304.4043 160.8652 303.1597 c
158.0898 302.2241 156.8916 301.7144 156.5449 301.5977 c
156.3242 301.5229 156.2607 301.6069 156.2183 301.7334 c
155.9312 302.585 L
155.8779 302.7427 155.8882 302.8164 156.0459 302.8691 c
156.8657 303.146 L
157.938 303.5073 158.1055 303.7397 157.9346 304.5601 c
157.8599 304.8862 156.2949 309.8384 155.0615 313.4971 c
153.8384 317.124 L
153.1362 319.2056 151.9883 322.5068 151.8291 322.8745 c
151.5532 323.4839 151.2168 323.4409 150.5859 323.228 c
149.1035 322.728 L
148.9458 322.6748 148.8931 322.7275 148.8291 322.9165 c
148.5527 323.7368 L
148.4995 323.8945 148.5098 323.9683 148.6675 324.0215 c
149.0142 324.1387 150.1816 324.4268 153.4932 325.5435 c
154.061 325.7349 155.8901 326.457 156.9307 326.8076 c
160.8101 328.1157 162.7773 328.4282 165.0854 327.6255 c
166.7505 327.063 168.3027 325.5845 169.0049 323.5024 c
170.2808 319.7178 168.125 316.1104 162.8267 314.3237 c
161.8486 313.9941 161.1128 313.7813 160.2397 313.5571 C
160.6333 312.3901 l
f
1 D
159.8252 314.7871 m
160.5723 314.8633 161.3081 315.0762 161.813 315.2466 c
162.7905 315.5762 164.0273 317.1172 164.3486 318.4551 c
164.6499 319.6455 164.3721 320.8867 163.9785 322.0537 c
162.5107 326.4063 159.0483 326.2573 157.7554 325.8213 c
157.2192 325.6406 156.8511 325.4814 156.3262 325.1636 C
159.8252 314.7871 l
f
*U
*u
0 D
176.0835 323.4067 m
175.7695 325.8491 175.498 327.9614 175.3506 328.8486 c
175.1777 329.9336 174.6763 330.4395 174.2144 330.3799 c
172.894 330.2104 L
172.729 330.189 172.6831 330.2837 172.6665 330.416 c
172.5518 331.3071 L
172.5308 331.4722 172.5552 331.5425 172.7202 331.5605 c
173.0171 331.5986 174.0532 331.6313 177.6504 332.0938 c
179.499 332.3311 182.3906 332.8032 183.7437 332.9805 c
186.3179 333.311 188.3511 332.6328 189.8657 331.5527 c
191.1938 330.6162 192.0522 329.4185 192.209 328.1973 c
192.748 324.0054 189.8545 321.7212 186.9839 321.084 c
187.0137 320.853 L
188.0791 320.6543 188.6875 320.0952 189.4165 319.3838 c
189.9136 318.9106 192.1064 316.2065 192.4214 315.8442 c
192.6572 315.5728 194.7622 313.2935 195.5195 312.6191 c
195.9712 312.2412 197.2593 312.1382 198.0181 312.2358 c
198.249 312.2656 198.2993 312.1377 198.3164 312.0059 c
198.418 311.2134 L
198.4434 311.0156 198.4233 310.9121 198.1919 310.8828 c
197.9282 310.8486 197.0571 310.8374 194.5156 310.5107 c
193.5586 310.3877 192.3462 310.1646 191.3931 310.0088 c
190.3057 310.6406 187.7671 314.2061 187.0615 315.2563 c
185.6514 317.3564 183.9839 319.6245 182.3999 319.4209 c
181.2778 319.2769 L
181.4941 317.5938 L
181.7441 315.6465 182.3184 311.9624 182.4395 311.542 c
182.5947 310.8574 182.9351 310.2974 183.4302 310.3608 c
184.7832 310.5347 L
185.0142 310.5645 185.0601 310.4697 185.0811 310.3047 c
185.1831 309.5127 L
185.2129 309.2817 185.1885 309.2114 184.6934 309.1475 c
184.6602 309.1436 183.8223 309.1362 180.3569 308.6909 c
176.8584 308.2412 176.1118 308.0449 175.749 307.998 c
175.4849 307.9644 175.4722 308.063 175.4424 308.2939 c
175.3447 309.0532 L
175.3237 309.2183 175.311 309.3174 175.4761 309.3384 c
176.4663 309.4658 L
177.1924 309.5591 177.7568 309.8667 177.6504 310.6914 c
177.2964 313.9678 176.8979 317.0698 176.4951 320.2056 C
176.0835 323.4067 l
f
1 D
181.1621 320.4365 m
181.7935 320.4839 182.1895 320.5347 182.4868 320.5728 c
186.8433 321.1328 187.332 325.4229 187.1323 326.9741 c
186.9375 328.4927 186.2227 329.877 185.4033 330.5098 c
184.0796 331.4131 182.5435 331.6182 181.5532 331.4907 c
180.9922 331.4189 180.5713 331.2979 180.3369 331.0327 c
180.1563 330.875 180.1035 330.4995 180.0884 330.0947 C
181.1621 320.4365 l
f
*U
*u
0 D
202.8604 312.2183 m
200.6445 313.8682 198.4697 317.687 198.9331 322.5234 c
199.1265 324.5444 199.958 327.6406 202.8037 330.4771 c
206.0586 333.7422 209.8652 334.0464 212.8467 333.7607 c
215.5967 333.4971 218.1064 332.8223 220.6787 330.3691 c
223.0068 328.1401 224.707 324.6011 224.2686 320.0293 c
224.0371 317.6113 223.0342 315.1665 221.0889 313.0127 c
218.6787 310.5356 215.6729 308.8179 210.4385 309.3193 c
208.1523 309.5381 205.3213 310.3442 202.8604 312.2183 c
f
1 D
219.042 320.2627 m
219.7373 327.5176 215.3477 331.9497 212.5654 332.2163 c
211.9023 332.2798 210.2627 332.604 208.0547 330.8433 c
205.9219 329.1753 204.5947 325.792 204.335 323.0757 c
203.5225 314.5952 208.1035 311.1143 210.8525 310.8506 c
216.9814 310.2637 218.7822 317.5464 219.042 320.2627 c
f
*U
*u
0 D
244.4258 326.1968 m
244.4756 326.3555 244.5273 326.4087 244.6865 326.3574 c
244.9717 326.2666 246.4004 325.709 248.5264 325.0352 c
251.4766 324.1001 252.2998 323.9438 252.585 323.8545 c
252.7754 323.7944 252.7871 323.7207 252.7168 323.4985 c
252.4658 322.7056 L
252.4248 322.5786 252.3633 322.4937 252.1729 322.5542 c
251.4434 322.7852 L
250.9043 322.9561 249.8506 323.0459 248.5732 321.8799 c
246.6201 320.125 244.0693 316.814 242.0195 314.5313 c
240.6836 313.0698 234.4033 305.7041 233.5732 304.9551 c
233.2305 304.645 233.0215 304.5366 232.6719 304.647 c
232.2598 304.7778 232.2539 305.1987 232.1943 305.6714 c
231.8145 308.5498 231.3613 317.1416 231.167 319.6123 c
230.9727 322.0825 230.8447 327.1851 230.7451 328.1938 c
230.6592 329.0244 230.3789 329.4619 229.7129 329.6733 c
228.8887 329.9346 L
228.7617 329.9751 228.7803 330.1436 228.8301 330.3022 c
229.0713 331.0635 L
229.1221 331.2222 229.1738 331.2754 229.3643 331.2139 c
229.6816 331.1133 230.6982 330.6865 234.5049 329.48 c
237.8037 328.4341 239.2617 328.0767 239.5469 327.9873 c
239.833 327.897 239.834 327.792 239.7734 327.6016 c
239.543 326.8716 L
239.4922 326.7134 239.4199 326.5962 239.1982 326.6665 c
237.834 327.0991 L
237.0732 327.3403 236.3594 327.1826 236.2285 326.77 c
236.1484 326.5166 236.0273 326.1357 235.9824 325.6616 c
235.874 324.439 235.8828 320.2817 235.9658 318.2305 c
236.0059 316.9263 236.1143 311.7603 236.1338 310.3921 c
236.2607 310.3521 L
237.8545 312.186 240.666 315.6587 241.4404 316.6699 c
242.5361 318.0332 244.3643 320.3862 245.3242 321.6528 c
245.9023 322.377 246.0742 322.9165 246.1943 323.2969 c
246.3154 323.6777 246.1455 324.4644 245.2256 324.7563 c
244.2422 325.0679 L
244.1152 325.1079 244.1133 325.2134 244.1738 325.4038 C
244.4258 326.1968 l
f
*U
*u
256.7041 309.2344 m
258.0508 308.5063 259.3867 307.8979 259.7852 307.7959 c
260.3467 307.644 260.8984 307.686 261.623 307.9756 c
262.1826 308.2412 262.9766 308.8711 263.2773 309.4272 c
263.3877 309.6323 263.5078 309.6436 263.6543 309.5645 c
264.3975 309.0493 L
264.5273 308.9409 264.6289 308.8481 264.5049 308.6885 c
264.1475 308.2383 263.3252 306.7153 262.7715 305.6904 c
262.0596 304.373 261.417 302.9043 261.1436 302.2573 c
261.0771 302.0659 260.9443 302.1001 260.7822 302.1499 c
260 302.3833 L
259.8672 302.417 259.8408 302.5073 259.8926 302.7441 c
260.0283 303.2759 260.0996 304.1074 260.1143 304.5537 c
260.0928 305.2842 259.5957 306.0449 259.0576 306.4492 c
258.3301 306.9932 257.4541 307.5425 256.166 308.2388 c
255.2158 306.4819 L
254.3613 304.9004 252.9736 301.981 252.6885 301.4541 c
251.8652 299.9316 251.9033 299.2305 252.1885 298.8491 c
252.5332 298.436 253.042 298.0474 254.5059 297.2563 c
255.0039 296.9873 256.249 296.3521 256.8955 296.0781 c
257.5137 295.8203 258.5498 295.6382 259.6436 295.8418 c
260.7373 296.0454 263.3584 296.9746 264.3232 297.3608 c
264.5039 297.415 264.6074 297.3965 264.6641 297.2905 c
265.0029 296.729 L
265.0889 296.6069 265.0703 296.5034 264.9941 296.4312 c
261.2871 292.7217 L
261.0566 292.5059 260.7568 292.4409 260.4053 292.6309 c
260.2588 292.71 259.6309 293.0874 257.7725 294.1294 c
255.8691 295.1577 252.7813 296.8643 247.7148 299.6016 c
246.6318 300.187 245.7959 300.6011 245.21 300.9175 c
244.5801 301.2202 244.1836 301.397 243.9199 301.5391 c
243.7148 301.6499 243.7031 301.7695 243.8301 302.0039 c
244.1621 302.6187 L
244.2578 302.7944 244.3926 302.835 244.5977 302.7241 c
245.4766 302.2495 L
246.8232 301.5215 247.0508 301.6631 247.6045 302.688 c
252.9053 312.4971 L
254.2188 314.9277 256.1064 318.561 256.2354 318.8696 c
256.625 319.8701 256.4424 320.2329 255.6523 320.6602 c
254.5098 321.2773 L
254.3926 321.3408 254.4111 321.4443 254.5225 321.6494 c
254.9014 322.3521 L
254.9492 322.4399 255.042 322.5415 255.2178 322.4463 c
255.8613 322.0981 256.8389 321.4565 259.5039 320.0166 c
269.7969 314.4917 L
270.2656 314.2388 270.8535 313.9966 271 313.9175 c
271.1465 313.8384 271.1738 313.748 271.1553 313.6445 c
271.0508 313.1714 269.8496 308.6377 269.8086 308.2813 c
269.7881 308.1035 269.7559 308.0449 269.5625 308.0361 c
268.9668 308.0552 L
268.8184 308.0596 268.6875 308.168 268.6787 308.3618 c
268.6592 308.6753 267.4482 312.7349 266.9961 313.5088 c
266.5869 314.2217 265.9727 315.0454 265.1982 315.502 c
261.3965 317.7075 L
256.7041 309.2344 l
f
*U
*u
274.2852 301.8281 m
274.8398 302.4922 277.7949 306.1812 278.0635 306.6064 c
278.499 307.2832 278.2529 307.6631 277.8193 308.0259 c
276.543 309.0933 L
276.415 309.2002 276.3594 309.2896 276.4873 309.4429 c
277.1064 310.1831 L
277.1924 310.2852 277.29 310.2466 277.3926 310.1602 c
277.7236 309.8823 278.7832 308.8667 281.3359 306.7319 c
282 306.1768 284.6162 304.1187 285.2041 303.6289 c
288.6758 300.7261 291.1768 298.1143 291.915 294.0693 c
292.4258 291.2563 291.8281 288.1558 289.3525 285.1943 c
286.8975 282.2588 284.4326 281.0229 281.2109 280.5938 c
276.4932 279.9844 272.1064 283.6089 270.498 284.9541 c
270.0898 285.2954 267.1416 287.8911 265.7373 289.0649 c
263.5166 290.9224 262.4316 291.6997 262.0742 291.9985 c
261.9463 292.105 261.9375 292.1987 262.0869 292.3774 c
262.6426 293.041 L
262.7275 293.1436 262.8467 293.1304 262.9746 293.0234 c
264.3018 291.9136 L
264.7871 291.5078 265.2383 291.4775 265.6309 291.8433 c
266.1563 292.3154 271.0615 297.9736 272.6836 299.9136 C
274.2852 301.8281 l
f
1 D
276.043 296.1499 m
275.7656 295.8184 272.1621 291.457 270.8643 289.853 c
270.4375 289.3423 270.1982 288.8486 270.124 288.0859 c
270.0459 287.3706 270.7861 286.4912 271.6543 285.7656 c
273.1348 284.5273 275.7197 283.624 278.5195 284.2754 c
280.6729 284.7744 283.2139 286.2061 285.1992 288.5801 c
286.9502 290.6733 287.875 293.5435 287.7852 295.8745 c
287.6914 298.5117 286.1289 301.2075 284.6475 302.4453 c
283.9336 303.0435 283.5293 303.3379 283.0479 303.4365 c
282.5156 303.5781 282.0713 303.2554 281.6191 302.7661 c
280.6973 301.7153 277.9004 298.3711 277.5586 297.9624 C
276.043 296.1499 l
f
*U
U
u
*u
0 D
0.129412 1 1 0.031373 0.807843 0.090196 0.090196 (R=206 G=23 B=23) 0 1 Xk
75.9766 195.6504 m
75.5762 194.5996 73.126 187.75 73.126 186.1494 c
73.126 185.0498 73.5762 183.8496 75.0762 183.8496 c
76.8262 183.8496 L
77.3262 183.8496 77.377 183.6494 77.377 183.4492 c
77.377 182.3496 L
77.377 181.9492 77.3262 181.7988 76.9268 181.7988 c
76.2764 181.7988 74.2266 181.9492 70.126 181.9492 c
66.4756 181.9492 65.376 181.7988 64.6758 181.7988 c
64.376 181.7988 64.3262 182.0996 64.3262 182.4492 c
64.3262 183.3994 L
64.3262 183.6992 64.376 183.8496 64.6758 183.8496 c
65.9756 183.8496 L
67.1758 183.8496 68.376 184.5498 69.376 186.0498 c
70.0762 187.0996 73.626 195.8008 75.2764 200.2002 c
75.6768 201.2002 79.7266 211.9512 80.1768 213.3008 c
80.3271 213.8008 80.5771 214.4512 80.2266 215.001 c
80.0771 215.2012 79.877 215.4512 79.877 215.6514 c
79.877 215.8008 79.9766 216.001 80.377 216.1006 c
81.9766 216.4512 85.2266 217.751 85.9766 218.6016 c
86.2275 218.8516 86.377 219.0508 86.627 219.0508 c
86.9268 219.0508 87.0273 218.751 87.1768 218.2012 c
88.127 215.0508 92.0273 203.8506 92.9775 200.6504 c
94.1279 196.75 97.3779 187.4492 98.0781 186.0996 c
98.9277 184.4492 100.2275 183.8496 100.9775 183.8496 c
102.6777 183.8496 L
102.9785 183.8496 103.0283 183.6494 103.0283 183.3994 c
103.0283 182.4492 L
103.0283 182.1494 102.9785 181.7988 102.5781 181.7988 c
101.6279 181.7988 100.5781 181.9492 94.1777 181.9492 c
90.0273 181.9492 88.2773 181.7988 87.2773 181.7988 c
86.7773 181.7988 86.7275 182.0996 86.7275 182.4492 c
86.7275 183.3994 L
86.7275 183.6494 86.7773 183.8496 87.0273 183.8496 c
88.4268 183.8496 L
89.7773 183.8496 90.2275 184.3496 89.9277 185.6494 c
89.4775 187.4492 87.5273 193.8496 86.9268 195.6504 C
75.9766 195.6504 l
f
1 D
86.4775 197.6504 m
86.0273 199.1504 83.0771 209.6504 82.7266 210.9004 c
82.5264 211.6504 82.4268 212.001 82.1768 212.001 c
81.877 212.001 81.7266 211.8008 81.5771 211.3506 c
81.3271 210.7012 77.0264 198.9004 76.627 197.6504 C
86.4775 197.6504 l
f
*U
*u
0 D
113.376 195.2002 m
113.376 192.8496 113.4258 186.0498 113.4766 185.4492 c
113.5762 184.3496 114.0762 183.8496 114.876 183.8496 c
117.4268 183.8496 L
117.7764 183.8496 117.8262 183.6992 117.8262 183.499 c
117.8262 182.1992 L
117.8262 181.9492 117.7764 181.7988 117.376 181.7988 c
116.6768 181.7988 115.126 181.9492 109.2764 181.9492 c
104.876 181.9492 102.9258 181.7988 102.376 181.7988 c
102.0254 181.7988 101.9756 181.9492 101.9756 182.1494 c
101.9756 183.499 L
101.9756 183.749 102.0254 183.8496 102.2754 183.8496 c
103.5752 183.8496 L
105.2754 183.8496 105.626 184.0996 105.7754 185.3496 c
105.8262 185.8496 105.9756 193.6504 105.9756 199.4502 c
105.9756 205.2002 L
105.9756 208.501 105.9258 213.751 105.876 214.3506 c
105.7754 215.3506 105.2754 215.4512 104.2754 215.4512 c
101.9258 215.4512 L
101.6758 215.4512 101.625 215.5508 101.625 215.8506 c
101.625 217.1514 L
101.625 217.4014 101.6758 217.501 101.9258 217.501 c
102.4756 217.501 104.2754 217.3516 109.5264 217.3516 c
110.4258 217.3516 113.376 217.501 115.0264 217.501 c
121.1768 217.501 124.127 217.001 127.0273 214.751 c
129.127 213.1514 130.627 210.3008 130.627 207.001 c
130.627 201 125.8271 196.9004 117.4268 196.9004 c
115.876 196.9004 114.7266 196.9502 113.376 197.0508 C
113.376 195.2002 l
f
1 D
113.376 199 m
114.4766 198.75 115.626 198.7002 116.4268 198.7002 c
117.9766 198.7002 120.4766 200.2998 121.5771 202.0498 c
122.5771 203.6006 122.7764 205.5 122.7764 207.3506 c
122.7764 214.251 117.7764 215.7012 115.7266 215.7012 c
114.876 215.7012 114.2764 215.6514 113.376 215.4512 C
113.376 199 l
f
*U
*u
0 D
143.376 195.2002 m
143.376 192.8496 143.4258 186.0498 143.4756 185.4492 c
143.5762 184.3496 144.0762 183.8496 144.876 183.8496 c
147.4258 183.8496 L
147.7764 183.8496 147.8262 183.6992 147.8262 183.499 c
147.8262 182.1992 L
147.8262 181.9492 147.7764 181.7988 147.376 181.7988 c
146.6758 181.7988 145.126 181.9492 139.2754 181.9492 c
134.875 181.9492 132.9248 181.7988 132.375 181.7988 c
132.0254 181.7988 131.9746 181.9492 131.9746 182.1494 c
131.9746 183.499 L
131.9746 183.749 132.0254 183.8496 132.2754 183.8496 c
133.5752 183.8496 L
135.2754 183.8496 135.625 184.0996 135.7754 185.3496 c
135.8252 185.8496 135.9756 193.6504 135.9756 199.4502 c
135.9756 205.2002 L
135.9756 208.501 135.9248 213.751 135.875 214.3506 c
135.7754 215.3506 135.2754 215.4512 134.2754 215.4512 c
131.9248 215.4512 L
131.6748 215.4512 131.625 215.5508 131.625 215.8506 c
131.625 217.1514 L
131.625 217.4014 131.6748 217.501 131.9248 217.501 c
132.4746 217.501 134.2754 217.3516 139.5254 217.3516 c
140.4258 217.3516 143.376 217.501 145.0254 217.501 c
151.1758 217.501 154.126 217.001 157.0264 214.751 c
159.127 213.1514 160.627 210.3008 160.627 207.001 c
160.627 201 155.8262 196.9004 147.4258 196.9004 c
145.876 196.9004 144.7256 196.9502 143.376 197.0508 C
143.376 195.2002 l
f
1 D
143.376 199 m
144.4756 198.75 145.626 198.7002 146.4258 198.7002 c
147.9756 198.7002 150.4766 200.2998 151.5762 202.0498 c
152.5762 203.6006 152.7764 205.5 152.7764 207.3506 c
152.7764 214.251 147.7764 215.7012 145.7256 215.7012 c
144.876 215.7012 144.2754 215.6514 143.376 215.4512 C
143.376 199 l
f
*U
*u
0 D
166.1748 204.7002 m
166.1748 208.4004 166.1748 211.6006 166.125 212.9512 c
166.0752 214.6006 165.4248 215.4512 164.7256 215.4512 c
162.7246 215.4512 L
162.4746 215.4512 162.4248 215.6006 162.4248 215.8008 c
162.4248 217.1514 L
162.4248 217.4014 162.4746 217.501 162.7246 217.501 c
163.1748 217.501 164.7256 217.3516 170.1758 217.3516 c
172.9756 217.3516 177.376 217.501 179.4258 217.501 c
183.3262 217.501 186.2266 216.1006 188.2764 214.2012 c
190.0771 212.5508 191.127 210.6006 191.127 208.751 c
191.127 202.4004 186.377 199.5508 181.9766 199.1504 c
181.9766 198.8008 L
183.5264 198.3008 184.3262 197.3496 185.2764 196.1504 c
185.9268 195.3496 188.6768 190.9004 189.0762 190.2998 c
189.377 189.8496 192.0771 186.0498 193.0771 184.8994 c
193.6768 184.249 195.5771 183.8496 196.7275 183.8496 c
197.0771 183.8496 197.127 183.6494 197.127 183.4492 c
197.127 182.249 L
197.127 181.9492 197.0771 181.7988 196.7275 181.7988 c
196.3271 181.7988 195.0273 181.9492 191.1768 181.9492 c
189.7266 181.9492 187.877 181.8496 186.4268 181.7988 c
184.9268 182.9492 181.8262 188.75 180.9766 190.4492 c
179.2764 193.8496 177.2256 197.5508 174.8262 197.5508 c
173.126 197.5508 L
173.126 195 L
173.126 192.0498 173.2754 186.4492 173.376 185.7998 c
173.4756 184.749 173.876 183.8496 174.626 183.8496 c
176.6758 183.8496 L
177.0264 183.8496 177.0762 183.6992 177.0762 183.4492 c
177.0762 182.249 L
177.0762 181.8994 177.0264 181.7988 176.2754 181.7988 c
176.2256 181.7988 174.9756 181.9492 169.7256 181.9492 c
164.4248 181.9492 163.2754 181.7988 162.7246 181.7988 c
162.3252 181.7988 162.3252 181.9492 162.3252 182.2988 c
162.3252 183.4492 L
162.3252 183.6992 162.3252 183.8496 162.5752 183.8496 c
164.0752 183.8496 L
165.1748 183.8496 166.0752 184.1992 166.0752 185.4492 c
166.1748 190.4004 166.1748 195.0996 166.1748 199.8496 C
166.1748 204.7002 l
f
1 D
173.1758 199.3008 m
174.126 199.25 174.7256 199.25 175.1758 199.25 c
181.7764 199.25 183.3262 205.5508 183.3262 207.9004 c
183.3262 210.2012 182.5264 212.4004 181.4258 213.501 c
179.626 215.1006 177.376 215.7012 175.876 215.7012 c
175.0254 215.7012 174.376 215.6006 173.9756 215.251 c
173.6758 215.0508 173.5254 214.501 173.4258 213.9014 C
173.1758 199.3008 l
f
*U
*u
0 D
203.374 184.4492 m
199.8242 186.5996 196.0244 192 196.0244 199.3008 c
196.0244 202.3506 196.8242 207.1006 200.6748 211.751 c
205.0742 217.1016 210.7246 218.1016 215.2246 218.1016 c
219.375 218.1016 223.2256 217.4512 227.4258 214.1514 c
231.2266 211.1504 234.2754 206.1006 234.2754 199.2002 c
234.2754 195.5498 233.126 191.75 230.5254 188.25 c
227.2754 184.1992 223.0254 181.1992 215.125 181.1992 c
211.6748 181.1992 207.3242 181.999 203.374 184.4492 c
f
1 D
226.4258 198.8008 m
226.4258 209.751 219.2246 215.751 215.0254 215.751 c
214.0254 215.751 211.5254 216.001 208.4746 213.0508 c
205.5244 210.251 204.0244 205 204.0244 200.9004 c
204.0244 188.0996 211.375 183.5498 215.5254 183.5498 c
224.7754 183.5498 226.4258 194.7002 226.4258 198.8008 c
f
*U
*u
0 D
256.5752 217.1514 m
256.5752 217.4014 256.625 217.501 256.875 217.501 c
257.3252 217.501 259.625 217.3516 262.9756 217.3516 c
267.626 217.3516 268.876 217.501 269.3262 217.501 c
269.626 217.501 269.6758 217.4014 269.6758 217.0508 c
269.6758 215.8008 L
269.6758 215.6006 269.626 215.4512 269.3262 215.4512 c
268.1758 215.4512 L
267.3262 215.4512 265.7754 215.1006 264.4756 212.8506 c
262.4756 209.4502 260.3252 203.5508 258.4258 199.3496 c
257.1758 196.6504 251.5254 183.249 250.6748 181.7988 c
250.3242 181.1992 250.0742 180.9492 249.5254 180.9492 c
248.875 180.9492 248.6748 181.5488 248.375 182.1992 c
246.5244 186.1494 241.9746 198.25 240.5742 201.7002 c
239.1738 205.1504 236.6738 212.4004 236.0742 213.8008 c
235.5742 214.9512 234.9736 215.4512 233.9238 215.4512 c
232.623 215.4512 L
232.4238 215.4512 232.373 215.7012 232.373 215.9512 c
232.373 217.1514 L
232.373 217.4014 232.4238 217.501 232.7236 217.501 c
233.2236 217.501 234.874 217.3516 240.874 217.3516 c
246.0742 217.3516 248.3242 217.501 248.7754 217.501 c
249.2246 217.501 249.2754 217.3516 249.2754 217.0508 c
249.2754 215.9014 L
249.2754 215.6514 249.2246 215.4512 248.875 215.4512 c
246.7246 215.4512 L
245.5244 215.4512 244.5742 214.9014 244.5742 214.251 c
244.5742 213.8506 244.5742 213.251 244.7246 212.5508 c
245.125 210.751 247.0244 204.8008 248.0742 201.9004 c
248.7246 200.0498 251.2246 192.6992 251.875 190.75 c
252.0742 190.75 L
253.5254 194.0996 255.9746 200.3506 256.625 202.1504 c
257.5752 204.6006 259.125 208.8008 259.9258 211.0508 c
260.4258 212.3506 260.4258 213.2012 260.4258 213.8008 c
260.4258 214.4014 259.8252 215.4512 258.375 215.4512 c
256.8252 215.4512 L
256.625 215.4512 256.5752 215.6006 256.5752 215.9014 C
256.5752 217.1514 l
f
*U
*u
278.374 201.1006 m
280.6738 201.1006 282.875 201.25 283.4746 201.4004 c
284.3242 201.6006 285.0244 202.0498 285.7744 202.9502 c
286.3242 203.7002 286.9248 205.1006 286.9248 206.0508 c
286.9248 206.4004 287.0742 206.5 287.3242 206.5 c
288.6748 206.3506 L
288.9248 206.3008 289.125 206.25 289.0742 205.9502 c
288.9248 205.1006 288.9248 202.5 288.9248 200.75 c
288.9248 198.5 289.125 196.0996 289.2246 195.0498 c
289.2754 194.75 289.0742 194.7002 288.8242 194.6504 c
287.625 194.4004 L
287.4248 194.3496 287.3242 194.4502 287.2246 194.7998 c
287.0254 195.5996 286.5254 196.75 286.2246 197.3496 c
285.6748 198.3008 284.4746 198.9502 283.4746 199.0996 c
282.125 199.3008 280.5742 199.4004 278.374 199.4004 c
278.374 196.4004 L
278.374 193.6992 278.624 188.8496 278.624 187.9492 c
278.624 185.3496 279.1738 184.4492 279.8242 184.1494 c
280.5742 183.8496 281.5244 183.6992 284.0244 183.6992 c
284.875 183.6992 286.9746 183.749 288.0254 183.8496 c
289.0254 183.9492 290.5254 184.4492 291.8252 185.499 c
293.125 186.5488 295.9258 189.6504 296.9258 190.8496 c
297.125 191.0498 297.2754 191.0996 297.4258 191 c
298.2754 190.5 L
298.4746 190.4004 298.5254 190.25 298.4746 190.0996 c
296.2246 182.5488 L
296.0762 182.0996 295.7246 181.7988 295.125 181.7988 c
294.875 181.7988 293.7754 181.8496 290.5742 181.8994 c
287.3242 181.8994 282.0244 181.9492 273.374 181.9492 c
271.5234 181.9492 270.123 181.8994 269.123 181.8994 c
268.0742 181.8496 267.4238 181.7988 266.9736 181.7988 c
266.623 181.7988 266.5234 181.9492 266.5234 182.3496 c
266.5234 183.3994 L
266.5234 183.6992 266.6738 183.8496 267.0234 183.8496 c
268.5234 183.8496 L
270.8242 183.8496 271.0234 184.1992 271.0234 185.9492 c
271.0234 202.7002 L
271.0234 206.8506 270.9238 213.001 270.873 213.501 c
270.6738 215.1006 270.1738 215.4512 268.8242 215.4512 c
266.873 215.4512 L
266.6738 215.4512 266.623 215.6006 266.623 215.9512 c
266.623 217.1514 L
266.623 217.3008 266.6738 217.501 266.9736 217.501 c
268.0742 217.501 269.8242 217.3516 274.374 217.3516 c
291.9248 217.4014 L
292.7246 217.4014 293.6758 217.501 293.9258 217.501 c
294.1758 217.501 294.2754 217.4014 294.3242 217.251 c
294.5254 216.5508 296.1758 209.7002 296.375 209.2002 c
296.4746 208.9502 296.4746 208.8506 296.2246 208.7002 c
295.4258 208.3008 L
295.2246 208.2002 294.9746 208.251 294.8242 208.501 c
294.5742 208.9004 290.0742 213.4014 288.9248 214.1006 c
287.875 214.751 286.4746 215.4014 285.125 215.4512 c
278.5244 215.6514 L
278.374 201.1006 l
f
*U
*u
302.2734 204.9004 m
302.2734 206.2002 302.123 213.3008 302.0234 214.0508 c
301.873 215.251 301.2227 215.4512 300.373 215.4512 c
297.873 215.4512 L
297.623 215.4512 297.4727 215.501 297.4727 215.8008 c
297.4727 217.251 L
297.4727 217.4512 297.623 217.501 297.8223 217.501 c
298.4727 217.501 300.6719 217.3516 305.6738 217.3516 c
306.9727 217.3516 311.9727 217.501 313.123 217.501 c
319.9238 217.501 325.3242 216.9014 330.0742 212.9512 c
333.375 210.2012 335.6738 206.0508 335.6738 200.25 c
335.6738 194.5 334.0254 190.6992 330.7246 187.0996 c
325.875 181.8496 317.3242 181.7988 314.1738 181.7988 c
313.373 181.7988 307.4727 181.9492 304.7227 181.9492 c
300.373 181.9492 298.373 181.7988 297.6719 181.7988 c
297.4219 181.7988 297.3223 181.8994 297.3223 182.249 c
297.3223 183.5498 L
297.3223 183.749 297.4727 183.8496 297.7227 183.8496 c
300.3223 183.8496 L
301.2734 183.8496 301.8223 184.249 301.9219 185.0498 c
302.0723 186.0996 302.2734 197.3496 302.2734 201.1504 C
302.2734 204.9004 l
f
1 D
309.7734 200.0498 m
309.7734 199.4004 309.8223 190.9004 309.873 187.7998 c
309.873 186.7988 310.0723 185.999 310.7227 185.0498 c
311.3242 184.1494 313.0234 183.8496 314.7227 183.8496 c
317.623 183.8496 321.4746 185.2998 324.0742 188.75 c
326.0742 191.4004 327.625 195.5 327.625 200.1504 c
327.625 204.25 325.9238 208.4502 323.5742 211.0508 c
320.9238 214.001 316.5234 215.6006 313.623 215.6006 c
312.2227 215.6006 311.4727 215.5508 310.8242 215.2012 c
310.0723 214.8506 309.873 214.0508 309.8223 213.0508 c
309.7734 210.9512 309.7734 204.4004 309.7734 203.6006 C
309.7734 200.0498 l
f
*U
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(Layer 4) Ln
0 A
u
0 D
0 O
0.129412 1 1 0.031373 0.807843 0.090196 0.090196 (R=206 G=23 B=23) 0 1 Xk
0 J 0 j 1 w 4 M []0 d0 XR
160.333 264.2988 m
163.0771 258.7388 L
169.2119 257.8477 L
164.7725 253.5205 L
165.8203 247.4102 L
160.333 250.2939 L
154.8457 247.4102 L
155.8936 253.5205 L
151.4551 257.8477 L
157.5898 258.7388 L
160.333 264.2988 L
f
239.667 264.2988 m
242.4111 258.7388 L
248.5459 257.8477 L
244.1064 253.5205 L
245.1543 247.4102 L
239.667 250.2939 L
234.1787 247.4102 L
235.2275 253.5205 L
230.7881 257.8477 L
236.9229 258.7388 L
239.667 264.2988 L
f
200.0029 284.5898 m
206.042 272.3491 L
219.5459 270.3882 L
209.7744 260.8623 L
212.0811 247.4102 L
200.0029 253.7598 L
187.9209 247.4102 L
190.2295 260.8623 L
180.4541 270.3882 L
193.9619 272.3491 L
200.0029 284.5898 L
f
U
u
0 0 0 0 1 1 1 Xa
161.2939 136.0635 m
163.2803 140.0869 L
167.7197 140.7314 L
164.5068 143.8633 L
165.2646 148.2842 L
161.2939 146.1982 L
157.3232 148.2842 L
158.082 143.8633 L
154.8701 140.7314 L
159.3096 140.0869 L
161.2939 136.0635 L
f
238.7041 136.0635 m
240.6904 140.0869 L
245.1299 140.7314 L
241.917 143.8633 L
242.6748 148.2842 L
238.7041 146.1982 L
234.7324 148.2842 L
235.4922 143.8633 L
232.2793 140.7314 L
236.7188 140.0869 L
238.7041 136.0635 L
f
200.002 121.3799 m
204.3721 130.2383 L
214.1436 131.6572 L
207.0723 138.5508 L
208.7412 148.2842 L
200.002 143.6895 L
191.2578 148.2842 L
192.9287 138.5508 L
185.8545 131.6572 L
195.6299 130.2383 L
200.002 121.3799 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
